{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///../dist/animation/animation.js","webpack:///../dist/animation/particle-animation.js","webpack:///../dist/animator.js","webpack:///../dist/data/feature-class.js","webpack:///../dist/data/field.js","webpack:///../dist/element/feature.js","webpack:///../dist/element/graphic.js","webpack:///../dist/geometry/geometry.js","webpack:///../dist/geometry/point.js","webpack:///../dist/geometry/polygon.js","webpack:///../dist/geometry/polyline.js","webpack:///../dist/index.js","webpack:///../dist/label/collision.js","webpack:///../dist/label/label.js","webpack:///../dist/layer/feature-layer.js","webpack:///../dist/layer/graphic-layer.js","webpack:///../dist/layer/layer.js","webpack:///../dist/map.js","webpack:///../dist/projection/bd09.js","webpack:///../dist/projection/gcj02.js","webpack:///../dist/projection/projection.js","webpack:///../dist/projection/web-mercator.js","webpack:///../dist/renderer/category-renderer.js","webpack:///../dist/renderer/class-renderer.js","webpack:///../dist/renderer/renderer.js","webpack:///../dist/renderer/simple-renderer.js","webpack:///../dist/symbol/symbol.js","webpack:///../dist/util/bound.js","webpack:///../dist/util/color.js","webpack:///../dist/util/subject.js","webpack:///./demo.js"],"names":[],"mappings":";QAAA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;;QAEA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;;;QAGA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA,0CAA0C,gCAAgC;QAC1E;QACA;;QAEA;QACA;QACA;QACA,wDAAwD,kBAAkB;QAC1E;QACA,iDAAiD,cAAc;QAC/D;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA,yCAAyC,iCAAiC;QAC1E,gHAAgH,mBAAmB,EAAE;QACrI;QACA;;QAEA;QACA;QACA;QACA,2BAA2B,0BAA0B,EAAE;QACvD,iCAAiC,eAAe;QAChD;QACA;QACA;;QAEA;QACA,sDAAsD,+DAA+D;;QAErH;QACA;;;QAGA;QACA;;;;;;;;;;;;;AClFA;AAAA;AAAA;AAAA;AAAA;AAAyD;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA,eAAe,yBAAyB;AACxC,eAAe,WAAW;AAC1B;AACA,+BAA+B,oEAAW;AAC1C;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,yBAAyB;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA,eAAe,MAAM;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,yBAAyB;AACxC,eAAe,WAAW;AAC1B;AACA,+BAA+B,oEAAW;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB;AACxB;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,yBAAyB;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB,uBAAuB,eAAe;AACtC,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA,eAAe,SAAS;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,yBAAyB;AACxC,eAAe,WAAW;AAC1B;AACA,+BAA+B,oEAAW;AAC1C;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,mCAAmC;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,yBAAyB;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC;AACvC;AACA,6BAA6B;AAC7B,mCAAmC;AACnC;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,oBAAoB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8DAA8D;AAC9D;AACA;;;;;;;;;;;;;AC9NA;AAAA;AAAA;AAAA;AAA6C;AACY;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,eAAe;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,gCAAgC,yDAAc;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,yBAAyB;AACxC,eAAe,WAAW;AAC1B;AACA,+BAA+B,oEAAW;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,yBAAyB;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;;;;;;;;;;;;ACrGA;AAAA;AAAA;AAAyC;AACzC;AACA;AACA;AACA;AACO,uBAAuB,qDAAO;AACrC;AACA;AACA;AACA,eAAe,IAAI;AACnB;AACA;AACA,yCAAyC;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yDAAyD,cAAc,aAAa;AACpF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,UAAU;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,UAAU;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AC3HA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA6C;AACO;AACV;AACM;AACF;AAC9C;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA,eAAe,aAAa;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,MAAM;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,MAAM;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,+DAAY;AAC7C,sCAAsC,qDAAK;AAC3C,4CAA4C,wDAAO;AACnD;AACA;AACA,iCAAiC,+DAAY;AAC7C,yCAAyC,2DAAQ;AACjD,4CAA4C,wDAAO;AACnD;AACA;AACA,iCAAiC,+DAAY;AAC7C,wCAAwC,yDAAO;AAC/C,4CAA4C,wDAAO;AACnD;AACA;AACA,SAAS;AACT;AACA;;;;;;;;;;;;;AClHA;AAAA;AAAA;AAAA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,8BAA8B;AAC/B;AACA;AACA;AACA;AACA;AACO;AACP;;;;;;;;;;;;;ACpBA;AAAA;AAAA;AAAA;AAAA;AAAuE;AACd;AACf;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,sBAAsB,qDAAO;AACpC;AACA;AACA,eAAe,SAAS;AACxB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,yBAAyB;AACxC,eAAe,WAAW;AAC1B,eAAe,MAAM;AACrB,eAAe,OAAO;AACtB;AACA,+BAA+B,oEAAW,4CAA4C,gEAAiB;AACvG;AACA;AACA;AACA;AACA;AACA,eAAe,WAAW;AAC1B,eAAe,MAAM;AACrB,gBAAgB,QAAQ;AACxB;AACA,+BAA+B,oEAAW;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,MAAM;AACrB,eAAe,yBAAyB;AACxC,eAAe,WAAW;AAC1B,eAAe,iBAAiB;AAChC;AACA,uCAAuC,oEAAW,iBAAiB,+DAAgB;AACnF;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,gBAAgB,QAAQ;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,oDAAoD;AAChG;AACA;AACA;AACA,2CAA2C,oDAAoD;AAC/F;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AClJA;AAAA;AAAA;AAAA;AAAyD;AACf;AAC1C;AACA;AACA;AACA;AACO,sBAAsB,qDAAO;AACpC;AACA;AACA,eAAe,SAAS;AACxB,eAAe,OAAO;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,yBAAyB;AACxC,eAAe,WAAW;AAC1B,eAAe,MAAM;AACrB;AACA,+BAA+B,oEAAW;AAC1C;AACA;AACA;AACA;AACA;AACA,eAAe,WAAW;AAC1B,eAAe,MAAM;AACrB,gBAAgB,QAAQ;AACxB;AACA,+BAA+B,oEAAW;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,gBAAgB,QAAQ;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,oDAAoD;AAChG;AACA;AACA;AACA,2CAA2C,oDAAoD;AAC/F;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACnEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAsC;AACiC;AACd;AACzD;AACA;AACA,UAAU;AACV;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,wCAAwC;AACzC;AACA;AACA,UAAU;AACV;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,oCAAoC;AACrC;AACA;AACA;AACO;AACP;AACA;AACA,eAAe,WAAW;AAC1B;AACA,yBAAyB;AACzB;AACA;AACA;AACA,eAAe,yBAAyB;AACxC,eAAe,WAAW;AAC1B,eAAe,MAAM;AACrB,eAAe,OAAO;AACtB;AACA,+BAA+B,oEAAW,4CAA4C,gEAAiB,KAAK;AAC5G;AACA;AACA;AACA,eAAe,WAAW;AAC1B,eAAe,MAAM;AACrB,gBAAgB,QAAQ;AACxB;AACA,+BAA+B,oEAAW;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,eAAe;AAC9B,eAAe,WAAW;AAC1B,gBAAgB,SAAS;AACzB;AACA,6DAA6D,oEAAW,KAAK;AAC7E;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,SAAS;AACxB,eAAe,eAAe;AAC9B,eAAe,yBAAyB;AACxC,eAAe,WAAW;AAC1B,gBAAgB,OAAO;AACvB;AACA,mDAAmD,oEAAW;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,yBAAyB;AACxC,eAAe,WAAW;AAC1B,eAAe,iBAAiB;AAChC;AACA,sCAAsC,oEAAW,iBAAiB,+DAAgB;AAClF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,yBAAyB;AACxC,eAAe,WAAW;AAC1B,eAAe,iBAAiB;AAChC;AACA,wCAAwC,oEAAW,iBAAiB,+DAAgB;AACpF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,iDAAK;AACxB;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,gBAAgB,QAAQ;AACxB;AACA,+BAA+B,cAAc;AAC7C;;;;;;;;;;;;;AC7LA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAAiB,SAAI,IAAI,SAAI;AAC7B,2BAA2B,+DAA+D,gBAAgB,EAAE,EAAE;AAC9G;AACA,mCAAmC,MAAM,6BAA6B,EAAE,YAAY,WAAW,EAAE;AACjG,kCAAkC,MAAM,iCAAiC,EAAE,YAAY,WAAW,EAAE;AACpG,+BAA+B,qFAAqF;AACpH;AACA,KAAK;AACL;AACsD;AAChB;AACe;AACI;AACzD;AACA;AACA;AACO,oBAAoB,kDAAQ;AACnC;AACA;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,WAAW;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,iDAAK;AAC/B;AACA;AACA;AACA;AACA,eAAe,yBAAyB;AACxC,eAAe,WAAW;AAC1B,eAAe,MAAM;AACrB,eAAe,OAAO;AACtB;AACA,+BAA+B,oEAAW,4CAA4C,gEAAiB;AACvG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,eAAe,eAAe;AAC9B,eAAe,WAAW;AAC1B,gBAAgB,SAAS;AACzB;AACA,qBAAqB,wDAAc,0BAA0B,oEAAW;AACxE;AACA;AACA,qBAAqB,wDAAc;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,gBAAgB,QAAQ;AACxB;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACrHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAsD;AAChB;AACc;AACK;AACzD;AACA;AACA;AACA;AACA;AACO,sBAAsB,kDAAQ;AACrC;AACA;AACA,eAAe,aAAa;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,WAAW;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT,0BAA0B,iDAAK;AAC/B;AACA;AACA;AACA,eAAe,yBAAyB;AACxC,eAAe,WAAW;AAC1B,eAAe,MAAM;AACrB,eAAe,OAAO;AACtB;AACA,+BAA+B,oEAAW,4CAA4C,+DAAgB;AACtG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,eAAe;AAC9B,eAAe,WAAW;AAC1B,gBAAgB,SAAS;AACzB;AACA,qBAAqB,wDAAc,0BAA0B,oEAAW;AACxE;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC;AACtC;AACA,gCAAgC,SAAS;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,wDAAc;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,gBAAgB,QAAQ;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C,eAAe;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACjJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAsD;AAChB;AACc;AACK;AACzD;AACA;AACA;AACA;AACA;AACO,uBAAuB,kDAAQ;AACtC;AACA;AACA,eAAe,WAAW;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,WAAW;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,0BAA0B,iDAAK;AAC/B;AACA;AACA;AACA,eAAe,yBAAyB;AACxC,eAAe,WAAW;AAC1B,eAAe,MAAM;AACrB,eAAe,OAAO;AACtB;AACA,+BAA+B,oEAAW,4CAA4C,+DAAgB;AACtG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,eAAe;AAC9B,eAAe,WAAW;AAC1B,gBAAgB,SAAS;AACzB;AACA,qBAAqB,wDAAc,0BAA0B,oEAAW;AACxE;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC;AACvC,iCAAiC,aAAa;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,aAAa;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,wDAAc;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,gBAAgB,QAAQ;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AC5KA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAsB;AACe;AACR;AACK;AACA;AACE;AACH;AACG;AACD;AACD;AACJ;AACA;AACQ;AACA;AACE;AACE;AACR;AACC;AACH;AACI;AACO;AACE;AACH;AACb;AACA;AACE;AACO;AACS;;;;;;;;;;;;;AC3B/C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAsD;AACG;AACzD;AACA;AACA;AACO;AACP;AACA;AACA,eAAe,UAAU;AACzB,eAAe,MAAM;AACrB,eAAe,iBAAiB;AAChC,eAAe,yBAAyB;AACxC,eAAe,WAAW;AAC1B,gBAAgB,UAAU;AAC1B;AACA,wDAAwD,oEAAW,KAAK,WAAW;AACnF;AACA;AACA;AACA;AACO;AACP;AACA;AACA,eAAe,UAAU;AACzB,eAAe,MAAM;AACrB,eAAe,iBAAiB;AAChC,eAAe,yBAAyB;AACxC,eAAe,WAAW;AAC1B,gBAAgB,UAAU;AAC1B;AACA,wDAAwD,oEAAW;AACnE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,UAAU;AACzB,eAAe,MAAM;AACrB,eAAe,iBAAiB;AAChC,eAAe,yBAAyB;AACxC,eAAe,WAAW;AAC1B,gBAAgB,UAAU;AAC1B;AACA,wDAAwD,oEAAW;AACnE;AACA;AACA;AACA,sEAAsE,iEAAc;AACpF;AACA,aAAa;AACb;AACA;AACA;AACA,SAAS,MAAM;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,UAAU;AACzB,eAAe,MAAM;AACrB,eAAe,iBAAiB;AAChC,eAAe,yBAAyB;AACxC,eAAe,WAAW;AAC1B,gBAAgB,UAAU;AAC1B;AACA,wDAAwD,oEAAW;AACnE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,MAAM;AACf;AACA;;;;;;;;;;;;;ACpHA;AAAA;AAAA;AAAA;AAAA;AAAoD;AACN;AACW;AACzD;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,+DAAgB;AAC1C;AACA;AACA;AACA,6BAA6B,0DAAe;AAC5C;AACA;AACA;AACA,eAAe,UAAU;AACzB,eAAe,yBAAyB;AACxC,eAAe,WAAW;AAC1B;AACA,yCAAyC,oEAAW;AACpD;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;;;;;;;;;;;;ACjCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAgC;AACyB;AACI;AACI;AACN;AACS;AAC1B;AACO;AACjD;AACA;AACA;AACO,2BAA2B,4CAAK;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,OAAO;AACrB,cAAc,SAAS;AACvB;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,SAAS;AACxB;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,eAAe,yBAAyB;AACxC,eAAe,WAAW;AAC1B,eAAe,MAAM;AACrB,eAAe,OAAO;AACtB;AACA,+BAA+B,oEAAW;AAC1C;AACA;AACA;AACA;AACA;AACA,8CAA8C,wEAAc;AAC5D;AACA;AACA,mDAAmD,4EAAgB;AACnE;AACA;AACA;AACA;AACA,mDAAmD,sEAAa;AAChE;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,+DAAY;AACvD;AACA;AACA,gDAAgD,qDAAK;AACrD;AACA;AACA,mFAAmF,iEAAc;AACjG;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA,sCAAsC,yBAAyB;AAC/D;AACA;AACA;AACA,iBAAiB,MAAM,MAAM,eAAe;AAC5C;AACA;AACA;AACA;AACA;AACA,uEAAuE,4DAAa;AACpF;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,yBAAyB;AACxC,eAAe,WAAW;AAC1B,eAAe,MAAM;AACrB,eAAe,OAAO;AACtB;AACA,oCAAoC,oEAAW;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,WAAW;AAC1B,eAAe,MAAM;AACrB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,gBAAgB,QAAQ;AACxB;AACA,+CAA+C,oEAAW;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,kDAAkD,2DAA2D;AAC7G;AACA;AACA,+CAA+C,2DAA2D;AAC1G;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACvMA;AAAA;AAAA;AAAA;AAAgC;AACyB;AACzD;AACA;AACA;AACO,2BAA2B,4CAAK;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,SAAS;AACxB;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,SAAS;AACxB;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,eAAe,QAAQ;AACvB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,yBAAyB;AACxC,eAAe,WAAW;AAC1B,eAAe,MAAM;AACrB,eAAe,OAAO;AACtB;AACA,+BAA+B,oEAAW;AAC1C;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,WAAW;AAC1B,eAAe,MAAM;AACrB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,gBAAgB,QAAQ;AACxB;AACA,+CAA+C,oEAAW;AAC1D;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,kDAAkD,2DAA2D;AAC7G;AACA;AACA,+CAA+C,2DAA2D;AAC1G;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACpHA;AAAA;AAAA;AAAA;AAAyD;AACf;AAC1C;AACA;AACA;AACO,oBAAoB,qDAAO;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,yBAAyB;AACxC,eAAe,WAAW;AAC1B,eAAe,MAAM;AACrB,eAAe,OAAO;AACtB;AACA,+BAA+B,oEAAW,2CAA2C;AACrF;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,WAAW;AAC1B,eAAe,MAAM;AACrB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,gBAAgB,QAAQ;AACxB;AACA,+CAA+C,oEAAW,8DAA8D,cAAc;AACtI;;;;;;;;;;;;;ACjEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAqC;AACmB;AACH;AACA;AACZ;AACH;AACtC;AACA;AACA;AACO,kBAAkB,qDAAO;AAChC;AACA;AACA,eAAe,wBAAwB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,iEAAY;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yDAAyD,cAAc,aAAa;AACpF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,kDAAQ;AACrC;AACA,+BAA+B,oEAAW;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,WAAW;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,SAAS;AACxB,eAAe,OAAO;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,MAAM;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,MAAM;AACrB,eAAe,OAAO;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,MAAM;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,UAAU;AACzB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,UAAU;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,iDAAK;AAChC;AACA,0DAA0D,6EAA6E;AACvI,6BAA6B,+EAA+E;AAC5G;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,sDAAsD,iEAAY;AAClE;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kEAAkE;AAClE;AACA,kEAAkE;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kEAAkE;AAClE;AACA,kEAAkE;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AC3XA;AAAA;AAAA;AAAA;AAAA;AAAsC;AACgB;AACtB;AAChC;AACA;AACA;AACA;AACA;AACA;AACO,mBAAmB,sDAAU;AACpC;AACA;AACA;AACA,eAAe,WAAW;AAC1B;AACA,uBAAuB,sDAAU;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,iDAAK;AACxB;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,gBAAgB,SAAS;AACzB;AACA;AACA;AACA,0BAA0B,sDAAU;AACpC,yBAAyB,4CAAK;AAC9B;AACA;AACA,+BAA+B,sDAAU;AACzC;AACA;AACA;AACA;AACA;AACA;AACA,+FAA+F;AAC/F;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,gBAAgB,SAAS;AACzB;AACA;AACA;AACA;AACA;AACA;AACA,0GAA0G;AAC1G;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACrGA;AAAA;AAAA;AAAA;AAAsC;AACgB;AACtD;AACA;AACA;AACA;AACA;AACO,oBAAoB,sDAAU;AACrC;AACA;AACA;AACA,eAAe,WAAW;AAC1B;AACA,uBAAuB,sDAAU;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,iDAAK;AACxB;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,gBAAgB,SAAS;AACzB;AACA;AACA,0BAA0B,sDAAU;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,gBAAgB,SAAS;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACjIA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,gCAAgC;AACjC;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA,cAAc,OAAO;AACrB,cAAc,OAAO;AACrB,eAAe,SAAS;AACxB;AACA,yBAAyB,WAAW;AACpC;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,gBAAgB,SAAS;AACzB;AACA,uBAAuB,WAAW;AAClC;AACA;AACA;AACA;AACA,iBAAiB,aAAa;AAC9B;AACA;;;;;;;;;;;;;ACnDA;AAAA;AAAA;AAAA;AAAsC;AACI;AAC1C;AACA;AACA;AACO,0BAA0B,sDAAU;AAC3C;AACA;AACA;AACA;AACA,mBAAmB,iDAAK;AACxB;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,gBAAgB,SAAS;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,gBAAgB,SAAS;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACvCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAyF;AACrC;AACd;AACtC;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,aAAa;AAC5B,eAAe,MAAM;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,+DAAY;AACrC,4CAA4C,gEAAiB;AAC7D,4CAA4C,iDAAK;AACjD,8CAA8C,iDAAK;AACnD;AACA;AACA;AACA;AACA,yBAAyB,+DAAY;AACrC,4CAA4C,+DAAgB;AAC5D,8CAA8C,iDAAK;AACnD;AACA;AACA;AACA;AACA,yBAAyB,+DAAY;AACrC,4CAA4C,+DAAgB;AAC5D,4CAA4C,iDAAK;AACjD,8CAA8C,iDAAK;AACnD;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;;;;;;;;;;;;ACrFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAyF;AACrC;AACd;AACtC;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,GAAG,iBAAiB;AAC7B,uBAAuB,YAAY;AACnC;AACA;AACA,qBAAqB,+DAAY;AACjC,wCAAwC,gEAAiB;AACzD,wCAAwC,iDAAK;AAC7C,0CAA0C,iDAAK;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,+DAAY;AACjC,wCAAwC,+DAAgB;AACxD,0CAA0C,iDAAK;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,+DAAY;AACjC,wCAAwC,+DAAgB;AACxD,wCAAwC,iDAAK;AAC7C,0CAA0C,iDAAK;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACtFA;AAAA;AAAA;AACA;AACA;AACO;AACP;;;;;;;;;;;;;ACJA;AAAA;AAAA;AACA;AACA;AACO;AACP;;;;;;;;;;;;;ACJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAAiB,SAAI,IAAI,SAAI;AAC7B,2BAA2B,+DAA+D,gBAAgB,EAAE,EAAE;AAC9G;AACA,mCAAmC,MAAM,6BAA6B,EAAE,YAAY,WAAW,EAAE;AACjG,kCAAkC,MAAM,iCAAiC,EAAE,YAAY,WAAW,EAAE;AACpG,+BAA+B,qFAAqF;AACpH;AACA,KAAK;AACL;AACsC;AACtC;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA,eAAe,yBAAyB;AACxC,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB;AACA,iCAAiC;AACjC;AACA;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB;AACA,iDAAiD,cAAc;AAC/D;AACA;AACA;AACA;AACO;AACP;AACA;AACA,eAAe,yBAAyB;AACxC,eAAe,WAAW;AAC1B;AACA,uBAAuB;AACvB;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA,cAAc,yBAAyB;AACvC,cAAc,aAAa;AAC3B;AACA,uBAAuB;AACvB;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,yBAAyB;AACxC,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA,eAAe,yBAAyB;AACxC,eAAe,WAAW;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,yBAAyB;AACvC,cAAc,aAAa;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,MAAM;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,cAAc,yBAAyB;AACvC,cAAc,OAAO;AACrB,cAAc,OAAO;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC;AACrC;AACA;AACA;AACA,mCAAmC;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA,cAAc,OAAO;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC;AACrC;AACA;AACA;AACA,wCAAwC;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,iDAAK,UAAU,iDAAK,oBAAoB,iDAAK;AACpE;AACA;AACA;AACA;AACA,cAAc,yBAAyB;AACvC,cAAc,OAAO;AACrB,cAAc,OAAO;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,yBAAyB;AACxC,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,yBAAyB;AACxC,eAAe,WAAW;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;;;;;;;;;;;;AC1mBA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,OAAO;AACvB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,OAAO;AACvB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,OAAO;AACvB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,OAAO;AACvB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,OAAO;AACvB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,SAAS;AACzB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,MAAM;AACrB,gBAAgB,QAAQ;AACxB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACzGA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,gBAAgB,OAAO;AACvB;AACA;AACA,kCAAkC,EAAE,aAAa,EAAE,aAAa,EAAE;AAClE;AACA;AACA;AACA;AACA;AACA,+BAA+B,OAAO;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,OAAO;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,MAAM;AACrB,eAAe,MAAM;AACrB,eAAe,OAAO;AACtB,gBAAgB,MAAM;AACtB;AACA;AACA;AACA,uBAAuB,WAAW;AAClC;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,MAAM;AACtB;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AClFA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA,eAAe,SAAS;AACxB;AACA;AACA;AACA;AACA,uCAAuC;AACvC,SAAS;AACT;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,SAAS;AACxB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,SAAS;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AChDA;AAAA;AAeiB;;AAEjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL,oBAAoB,yCAAG;AACvB;AACA;AACA,KAAK;;AAEL;;AAEA,sBAAsB,2CAAK;AAC3B,0BAA0B,uDAAiB;AAC3C;AACA;AACA;AACA;;AAEA,uBAAuB,2CAAK;AAC5B,2BAA2B,oDAAc;AACzC;;AAEA,uBAAuB,2CAAK;AAC5B,2BAA2B,oDAAc;AACzC;AACA;;AAEA,uBAAuB,2CAAK;AAC5B,2BAA2B,uDAAiB;AAC5C;AACA;AACA;AACA;AACA;;AAEA,uBAAuB,2CAAK;AAC5B,2BAA2B,uDAAiB;AAC5C;AACA;AACA;AACA;AACA;;AAEA,0BAA0B,8CAAQ;AAClC,0BAA0B,8CAAQ;AAClC,0BAA0B,8CAAQ;AAClC,0BAA0B,8CAAQ;AAClC,2BAA2B,mDAAa;AACxC,2BAA2B,mDAAa;AACxC,2BAA2B,mDAAa;AACxC,2BAA2B,mDAAa;AACxC;AACA;AACA;AACA;;AAEA;;AAEA,uD","file":"bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./demo.js\");\n","import { WebMercator } from \"../projection/web-mercator\";\r\n/**\r\n * 动画效果基类\r\n * @remarks\r\n * 动画两种实现方式：\r\n * 1.针对单个图形要素，实现动画，使用时，逻辑较清晰；\r\n * 2.针对整个图层，类似Symbol，使用时，可能存在效率问题；\r\n * 目前暂实现1，针对2，目前保留部分已注释的代码，便于日后参考。\r\n */\r\nexport class Animation {\r\n    /**\r\n     * 动画效果初始化\r\n     * @remarks\r\n     * 一般情况下，把一次性逻辑放于此处，以及处理动画的初始状态\r\n     * @param {CanvasRenderingContext2D} ctx - 绘图上下文\r\n     * @param {Projection} projection - 坐标投影转换\r\n     */\r\n    init(ctx, projection = new WebMercator()) {\r\n    }\r\n    /**\r\n     * 动画效果\r\n     * @remarks\r\n     * 通过Animator中requestAnimationFrame循环调用，因此注意优化代码，保持帧数\r\n     * @param {number} elapsed - 已逝去的时间，毫秒\r\n     * @param {CanvasRenderingContext2D} ctx - 绘图上下文\r\n     */\r\n    animate(elapsed, ctx) {\r\n    }\r\n}\r\n/**\r\n * 点默认动画效果类\r\n * @remarks\r\n * 类似flashing效果，从中心点向外光环扩散效果\r\n */\r\nexport class PointAnimation extends Animation {\r\n    //radius: number = this.limit / this.ring;\r\n    /**\r\n     * 创建动画效果\r\n     * @param {Point} geometry - 点\r\n     */\r\n    constructor(geometry) {\r\n        super();\r\n        /**\r\n         * 边宽\r\n         */\r\n        this.lineWidth = 2;\r\n        /**\r\n         * 颜色\r\n         */\r\n        this.color = \"#ff0000\";\r\n        /**\r\n         * 扩散速度\r\n         */\r\n        this.velocity = 10; //  px/s\r\n        /**\r\n         * 扩散的最大半径\r\n         */\r\n        this.limit = 30;\r\n        /**\r\n         * 扩散的光圈数\r\n         */\r\n        this.ring = 3;\r\n        this._point = geometry;\r\n    }\r\n    /**\r\n     * 动画效果初始化\r\n     * @remarks\r\n     * 一般情况下，把一次性逻辑放于此处，以及处理动画的初始状态\r\n     * @param {CanvasRenderingContext2D} ctx - 绘图上下文\r\n     * @param {Projection} projection - 坐标投影转换\r\n     */\r\n    init(ctx, projection = new WebMercator()) {\r\n        this._point.project(projection);\r\n        const matrix = ctx.getTransform();\r\n        this._screenX = (matrix.a * this._point.x + matrix.e);\r\n        this._screenY = (matrix.d * this._point.y + matrix.f);\r\n        /*ctx.save();\r\n        ctx.strokeStyle = this.color;\r\n        ctx.lineWidth = this.lineWidth;\r\n        //keep size\r\n        //地理坐标 转回 屏幕坐标\r\n        ctx.setTransform(1,0,0,1,0,0);\r\n        ctx.beginPath(); //Start path\r\n        ctx.arc(this._screenX, this._screenY, this.limit / this.ring, 0, Math.PI * 2, true);\r\n        ctx.stroke();\r\n        ctx.restore();*/\r\n    }\r\n    /**\r\n     * 动画效果\r\n     * @remarks\r\n     * 通过Animator中requestAnimationFrame循环调用，因此注意优化代码，保持帧数\r\n     * @param {number} elapsed - 已逝去的时间，毫秒\r\n     * @param {CanvasRenderingContext2D} ctx - 绘图上下文\r\n     */\r\n    animate(elapsed, ctx) {\r\n        ctx.save();\r\n        ctx.strokeStyle = this.color;\r\n        ctx.lineWidth = this.lineWidth;\r\n        //keep size\r\n        //地理坐标 转回 屏幕坐标\r\n        ctx.setTransform(1, 0, 0, 1, 0, 0);\r\n        /*ctx.arc(this._screenX, this._screenY, this.limit / this.ring, 0, Math.PI * 2, true);\r\n        ctx.fill();*/\r\n        for (let i = 0; i < this.ring; i++) {\r\n            ctx.beginPath(); //Start path\r\n            ctx.arc(this._screenX, this._screenY, (elapsed / 1000 * this.velocity + i * this.limit / this.ring) % this.limit, 0, Math.PI * 2, true);\r\n            //ctx.arc(this._screenX, this._screenY, this.limit / this.ring + ((elapsed/1000 + (this.limit - this.limit / this.ring) / this.velocity * (i/(this.ring - 1))) * this.velocity) % this.limit, 0, Math.PI * 2, true);\r\n            ctx.stroke();\r\n        }\r\n        ctx.restore();\r\n    }\r\n}\r\n/**\r\n * 线默认动画效果类\r\n * @remarks\r\n * 类似航线效果\r\n */\r\nexport class LineAnimation extends Animation {\r\n    /**\r\n     * 创建动画效果\r\n     * @param {Polyline} geometry - 线\r\n     */\r\n    constructor(geometry) {\r\n        super();\r\n        this._percent = 0;\r\n        /**\r\n         * 线宽\r\n         */\r\n        this.lineWidth = 2;\r\n        /**\r\n         * 起始色\r\n         */\r\n        this.startColor = \"#ff0000\";\r\n        /**\r\n         * 终止色\r\n         */\r\n        this.endColor = \"#ffff00\";\r\n        /**\r\n         * 二次贝塞尔曲线控制点与线段夹角\r\n         */\r\n        this.angle = Math.PI / 4;\r\n        this._polyline = geometry;\r\n    }\r\n    /**\r\n     * 动画效果初始化\r\n     * @remarks\r\n     * 一般情况下，把一次性逻辑放于此处，以及处理动画的初始状态\r\n     * @param {CanvasRenderingContext2D} ctx - 绘图上下文\r\n     * @param {Projection} projection - 坐标投影转换\r\n     */\r\n    init(ctx, projection = new WebMercator()) {\r\n        this._polyline.project(projection);\r\n        const matrix = ctx.getTransform();\r\n        this._screen = this._polyline.coordinates.map((point, index) => {\r\n            const screenX = (matrix.a * point[0] + matrix.e), screenY = (matrix.d * point[1] + matrix.f);\r\n            return [screenX, screenY];\r\n        });\r\n        //TODO: polyline, not line; but now just line\r\n        this._start = this._screen[0];\r\n        this._end = this._screen[1];\r\n        const k = (this._end[1] - this._start[1]) / (this._end[0] - this._start[0]);\r\n        const d = Math.sqrt((this._end[1] - this._start[1]) * (this._end[1] - this._start[1]) + (this._end[0] - this._start[0]) * (this._end[0] - this._start[0]));\r\n        const s = d / 2 / Math.cos(this.angle);\r\n        //const a = (Math.atan(k) < 0 ? (Math.PI +  Math.atan(k)) : Math.atan(k)) - this.angle;\r\n        //this._control = this._start[0] >= this._end[0] ? [this._start[0] + s * Math.cos(a), this._start[1] + s * Math.sin(a)] : [this._end[0] + s * Math.cos(a), this._end[1] + s * Math.sin(a)];\r\n        const a = Math.atan(k) - this.angle;\r\n        if (Math.atan(k) < 0) {\r\n            if (this._end[0] > this._start[0]) {\r\n                this._control = [this._start[0] + s * Math.cos(a), this._start[1] + s * Math.sin(a)];\r\n            }\r\n            else {\r\n                this._control = [this._end[0] + s * Math.cos(a), this._end[1] + s * Math.sin(a)];\r\n            }\r\n        }\r\n        else {\r\n            if (this._end[0] > this._start[0]) {\r\n                this._control = [this._start[0] + s * Math.cos(a), this._start[1] + s * Math.sin(a)];\r\n            }\r\n            else {\r\n                this._control = [this._end[0] + s * Math.cos(a), this._end[1] + s * Math.sin(a)];\r\n            }\r\n        }\r\n        this._percent = 0;\r\n    }\r\n    /**\r\n     * 动画效果\r\n     * @remarks\r\n     * 通过Animator中requestAnimationFrame循环调用，因此注意优化代码，保持帧数\r\n     * @param {number} elapsed - 已逝去的时间，毫秒\r\n     * @param {CanvasRenderingContext2D} ctx - 绘图上下文\r\n     */\r\n    animate(elapsed, ctx) {\r\n        ctx.save();\r\n        ctx.lineWidth = this.lineWidth;\r\n        //keep size\r\n        //地理坐标 转回 屏幕坐标\r\n        ctx.setTransform(1, 0, 0, 1, 0, 0);\r\n        const lineGradient = ctx.createLinearGradient(this._start[0], this._start[1], this._end[0], this._end[1]);\r\n        lineGradient.addColorStop(0, this.startColor);\r\n        // lineGradient.addColorStop(0.3, '#fff');\r\n        lineGradient.addColorStop(1, this.endColor);\r\n        ctx.strokeStyle = lineGradient; //设置线条样式\r\n        this._drawCurvePath(ctx, this._start, this._control, this._end, this._percent);\r\n        this._percent += 0.8; //进程增加,这个控制动画速度\r\n        if (this._percent >= 100) { //没有画完接着调用,画完的话重置进度\r\n            this._percent = 0;\r\n        }\r\n    }\r\n    _drawCurvePath(ctx, start, point, end, percent) {\r\n        ctx.beginPath();\r\n        ctx.moveTo(start[0], start[1]);\r\n        for (let t = 0; t <= percent / 100; t += 0.005) {\r\n            let x = this._quadraticBezier(start[0], point[0], end[0], t);\r\n            let y = this._quadraticBezier(start[1], point[1], end[1], t);\r\n            ctx.lineTo(x, y);\r\n        }\r\n        ctx.stroke();\r\n    }\r\n    _quadraticBezier(p0, p1, p2, t) {\r\n        let k = 1 - t;\r\n        return k * k * p0 + 2 * (1 - t) * t * p1 + t * t * p2; // 二次贝赛尔曲线方程\r\n    }\r\n}\r\n","import { PointAnimation } from \"./animation\";\r\nimport { WebMercator } from \"../projection/web-mercator\";\r\n/**\r\n * 星球或粒子类\r\n */\r\nclass Particle {\r\n    constructor(radius, speed, color) {\r\n        this.pos = Math.random() * 360;\r\n        this.c = color;\r\n        this.r = (Math.random() * radius / 10);\r\n        this.R = radius;\r\n        this.s = speed;\r\n    }\r\n}\r\n/**\r\n * 轨道类\r\n */\r\nclass Orbit {\r\n    constructor(radius, speed, color, count) {\r\n        this.particles = [];\r\n        this.radius = radius;\r\n        this.speed = speed;\r\n        this.color = color;\r\n        for (let index = 0; index < count; index++) {\r\n            let s = Math.random() / 60 * this.speed;\r\n            s = index % 2 ? s : s * -1;\r\n            this.particles.push(new Particle(radius, s, color));\r\n        }\r\n    }\r\n}\r\n/**\r\n * 星球环绕动画效果类\r\n * @remarks\r\n * 轨道星球环绕动画效果\r\n */\r\nexport class ParticleAnimation extends PointAnimation {\r\n    constructor() {\r\n        super(...arguments);\r\n        /**\r\n         * 轨道半径\r\n         */\r\n        this.radius = 20;\r\n        /**\r\n         * 环绕速度\r\n         */\r\n        this.speed = 10;\r\n        /**\r\n         * 颜色\r\n         */\r\n        this.color = \"#E76B76\";\r\n        /**\r\n         * 星球或粒子数\r\n         */\r\n        this.count = 40;\r\n        /**\r\n         * alpha通道\r\n         */\r\n        this.alpha = 0.5;\r\n        /**\r\n         * 颜色合成方式\r\n         */\r\n        this.composite = \"soft-light\";\r\n    }\r\n    /**\r\n     * 动画效果初始化\r\n     * @remarks\r\n     * 一般情况下，把一次性逻辑放于此处，以及处理动画的初始状态\r\n     * @param {CanvasRenderingContext2D} ctx - 绘图上下文\r\n     * @param {Projection} projection - 坐标投影转换\r\n     */\r\n    init(ctx, projection = new WebMercator()) {\r\n        super.init(ctx, projection);\r\n        this._orbit = new Orbit(this.radius, this.speed, this.color, this.count);\r\n    }\r\n    /**\r\n     * 动画效果\r\n     * @remarks\r\n     * 通过Animator中requestAnimationFrame循环调用，因此注意优化代码，保持帧数\r\n     * @param {number} elapsed - 已逝去的时间，毫秒\r\n     * @param {CanvasRenderingContext2D} ctx - 绘图上下文\r\n     */\r\n    animate(elapsed, ctx) {\r\n        ctx.save();\r\n        ctx.strokeStyle = this.color;\r\n        ctx.lineWidth = this.lineWidth;\r\n        ctx.setTransform(1, 0, 0, 1, 0, 0);\r\n        this._orbit.particles.forEach(particle => {\r\n            //绕圆形轨道，sin和cos来获得x和y的delta分量\r\n            particle.x = this._screenX + particle.R * Math.sin(Math.PI / 2 + particle.pos);\r\n            particle.y = this._screenY + particle.R * Math.cos(Math.PI / 2 + particle.pos);\r\n            particle.pos += particle.s;\r\n            ctx.beginPath();\r\n            ctx.globalAlpha = this.alpha;\r\n            ctx.globalCompositeOperation = this.composite;\r\n            ctx.fillStyle = particle.c;\r\n            ctx.arc(particle.x, particle.y, particle.r, 0, Math.PI * 2, false);\r\n            ctx.closePath();\r\n            ctx.fill();\r\n        });\r\n        ctx.restore();\r\n    }\r\n}\r\n","import { Subject } from \"./util/subject\";\r\n/**\r\n * 动画效果的管理器\r\n * 已内置于map，可通过map的接口进行添加删除的维护操作\r\n */\r\nexport class Animator extends Subject {\r\n    /**\r\n     * 创建Animator\r\n     * 不应自主创建，map内部创建\r\n     * @param {Map} map - 地图容器\r\n     */\r\n    constructor(map) {\r\n        super([\"mouseover\", \"mouseout\"]); //when mouseover feature\r\n        //图层列表\r\n        //private _layers: FeatureLayer[] = [];\r\n        this._animations = [];\r\n        this._map = map;\r\n        const container = map.container;\r\n        //create canvas\r\n        this._canvas = document.createElement(\"canvas\");\r\n        this._canvas.style.cssText = \"position: absolute; height: 100%; width: 100%; z-index: 80\";\r\n        this._canvas.width = container.clientWidth;\r\n        this._canvas.height = container.clientHeight;\r\n        container.appendChild(this._canvas);\r\n        this._onResize = this._onResize.bind(this);\r\n        this._extentChange = this._extentChange.bind(this);\r\n        this._ctx = this._canvas.getContext(\"2d\");\r\n        this._map.on(\"resize\", this._onResize);\r\n        this._map.on(\"extent\", this._extentChange);\r\n    }\r\n    //与主视图同步\r\n    _onResize(event) {\r\n        this._canvas.width = this._map.container.clientWidth;\r\n        this._canvas.height = this._map.container.clientHeight;\r\n    }\r\n    //与主视图同步\r\n    _extentChange(event) {\r\n        //const matrix = DOMMatrix.fromFloat64Array( new Float64Array([event.matrix.a, 0, 0, event.matrix.d, event.matrix.e, event.matrix.f] ) );\r\n        //this._ctx.setTransform(matrix);\r\n        this._ctx.setTransform(event.matrix.a, 0, 0, event.matrix.d, event.matrix.e, event.matrix.f);\r\n        this.redraw();\r\n    }\r\n    /**\r\n     * 添加动画\r\n     * @param {Animation} animation - 动画\r\n     */\r\n    addAnimation(animation) {\r\n        this._animations.push(animation);\r\n        this.redraw();\r\n    }\r\n    /**\r\n     * 删除动画\r\n     * @param {Animation} animation - 动画\r\n     */\r\n    removeAnimation(animation) {\r\n        const index = this._animations.findIndex(item => item === animation);\r\n        index != -1 && this._animations.splice(index, 1);\r\n        this.redraw();\r\n    }\r\n    /**\r\n     * 清除动画\r\n     */\r\n    clearAnimations() {\r\n        this._animations = [];\r\n        this.redraw();\r\n    }\r\n    /**\r\n     * 重绘\r\n     */\r\n    redraw() {\r\n        this._frame && window.cancelAnimationFrame(this._frame);\r\n        this._start = undefined;\r\n        this._ctx.save();\r\n        this._ctx.setTransform(1, 0, 0, 1, 0, 0);\r\n        this._ctx.clearRect(0, 0, this._canvas.width, this._canvas.height);\r\n        this._ctx.restore();\r\n        //动画初始化\r\n        this._animations.forEach(animation => {\r\n            animation.init(this._ctx, this._map.projection);\r\n        });\r\n        //this上下文绑定\r\n        this.animate = this.animate.bind(this);\r\n        //动画循环\r\n        this._frame = window.requestAnimationFrame(this.animate);\r\n    }\r\n    /**\r\n     * 动画循环\r\n     * @param {number} timestamp - 时间戳\r\n     */\r\n    animate(timestamp) {\r\n        if (this._start === undefined) {\r\n            this._start = timestamp;\r\n        }\r\n        //计算逝去时间，毫秒\r\n        const elapsed = timestamp - this._start;\r\n        this._ctx.save();\r\n        this._ctx.setTransform(1, 0, 0, 1, 0, 0);\r\n        this._ctx.clearRect(0, 0, this._canvas.width, this._canvas.height);\r\n        this._ctx.restore();\r\n        //遍历所以动画效果，执行动画\r\n        this._animations.forEach(animation => {\r\n            animation.animate(elapsed, this._ctx);\r\n        });\r\n        //循环，下一帧\r\n        this._frame = window.requestAnimationFrame(this.animate);\r\n    }\r\n    /**\r\n     * 清空画布\r\n     */\r\n    clear() {\r\n        this._ctx.save();\r\n        this._ctx.setTransform(1, 0, 0, 1, 0, 0);\r\n        this._ctx.clearRect(0, 0, this._canvas.width, this._canvas.height);\r\n        this._ctx.restore();\r\n    }\r\n    /**\r\n     * 销毁\r\n     */\r\n    destroy() {\r\n        this._map.off(\"resize\", this._onResize);\r\n        this._map.off(\"extent\", this._extentChange);\r\n        this._frame && window.cancelAnimationFrame(this._frame);\r\n    }\r\n}\r\n","import { Feature } from \"../element/feature\";\r\nimport { GeometryType } from \"../geometry/geometry\";\r\nimport { Point } from \"../geometry/point\";\r\nimport { Polyline } from \"../geometry/polyline\";\r\nimport { Polygon } from \"../geometry/polygon\";\r\n/**\r\n * 要素类（要素集合）\r\n * @remarks\r\n * TODO: a lot of things to be done\r\n */\r\nexport class FeatureClass {\r\n    /**\r\n     * 创建要素集合\r\n     * @param {GeometryType} type - 空间数据类型：点/线/面\r\n     */\r\n    constructor(type) {\r\n        /**\r\n         * 属性字段集合\r\n         */\r\n        this._fields = [];\r\n        /**\r\n         * 要素集合\r\n         */\r\n        this._features = [];\r\n        this._type = type;\r\n    }\r\n    /**\r\n     * 空间数据类型：点/线/面\r\n     */\r\n    get type() {\r\n        return this._type;\r\n    }\r\n    /**\r\n     * 要素集合\r\n     */\r\n    get features() {\r\n        return this._features;\r\n    }\r\n    /**\r\n     * 属性字段集合\r\n     */\r\n    get fields() {\r\n        return this._fields;\r\n    }\r\n    /**\r\n     * 添加要素\r\n     * @param {Feature} feature - 空间矢量要素\r\n     */\r\n    addFeature(feature) {\r\n        this._features.push(feature);\r\n    }\r\n    /**\r\n     * 删除要素\r\n     * @param {Feature} feature - 空间矢量要素\r\n     */\r\n    removeFeature(feature) {\r\n        const index = this._features.findIndex(item => item === feature);\r\n        index != -1 && this._features.splice(index, 1);\r\n    }\r\n    /**\r\n     * 清空要素集合\r\n     */\r\n    clearFeatures() {\r\n        this._features = [];\r\n    }\r\n    /**\r\n     * 添加字段\r\n     * @param {Field} field - 字段\r\n     */\r\n    addField(field) {\r\n        this._fields.push(field);\r\n    }\r\n    /**\r\n    * 删除字段\r\n    * @param {Field} field - 字段\r\n    */\r\n    removeField(field) {\r\n        const index = this._fields.findIndex(item => item === field);\r\n        index != -1 && this._fields.splice(index, 1);\r\n    }\r\n    /**\r\n    * 清空字段集合\r\n    */\r\n    clearFields() {\r\n        this._fields = [];\r\n    }\r\n    /**\r\n     * 加载GeoJSON数据格式\r\n     * @remarks\r\n     * TODO: multiple point line polygon is not supported\r\n     * @param {Object} data - GeoJSON数据\r\n     */\r\n    loadGeoJSON(data) {\r\n        Array.isArray(data.features) && data.features.forEach(item => {\r\n            switch (item.geometry.type) {\r\n                case \"Point\":\r\n                    //TODO: each feature has one type that is ridiculous, cause geojson is a featurecollection, not a featurelayer.\r\n                    this._type = GeometryType.Point;\r\n                    const point = new Point(item.geometry.coordinates[0], item.geometry.coordinates[1]);\r\n                    this._features.push(new Feature(point, item.properties));\r\n                    break;\r\n                case \"LineString\":\r\n                    this._type = GeometryType.Polyline;\r\n                    const polyline = new Polyline(item.geometry.coordinates);\r\n                    this._features.push(new Feature(polyline, item.properties));\r\n                    break;\r\n                case \"Polygon\":\r\n                    this._type = GeometryType.Polygon;\r\n                    const polygon = new Polygon(item.geometry.coordinates);\r\n                    this._features.push(new Feature(polygon, item.properties));\r\n                    break;\r\n            }\r\n        });\r\n    }\r\n}\r\n","/**\r\n * 字段类型\r\n */\r\nexport var FieldType;\r\n(function (FieldType) {\r\n    /**\r\n     * 字符串\r\n     */\r\n    FieldType[FieldType[\"String\"] = 1] = \"String\";\r\n    /**\r\n     * 数值型\r\n     */\r\n    FieldType[FieldType[\"Number\"] = 2] = \"Number\";\r\n})(FieldType || (FieldType = {}));\r\n/**\r\n * 字段\r\n * @remarks\r\n * TODO: a lot of things to be done\r\n */\r\nexport class Field {\r\n}\r\n","import { SimplePointSymbol, SimpleTextSymbol } from \"../symbol/symbol\";\r\nimport { WebMercator } from \"../projection/web-mercator\";\r\nimport { Subject } from \"../util/subject\";\r\n/**\r\n * 矢量要素\r\n * <p>\r\n * Graphic vs Feature：Graphic作为图形，可以一图形对应一渲染符号；而Feature作为矢量要素，常规应该根据图层设定的渲染方式Renderer来得到各个Feature的渲染符号，而非单一设置。<br/>\r\n * Graphic = Geometry + Symbol<br/>\r\n * Feature = Geometry + Properties<br/>\r\n * ArcGIS AO/AE: Feature = Geometry + Properties<br/>\r\n * ArcGIS JS API: Feature = Graphic = Geometry + Properties + Symbol<br/>\r\n * </p>\r\n */\r\nexport class Feature extends Subject {\r\n    /**\r\n     * 创建矢量要素\r\n     * @param {Geometry} geometry - 空间图形\r\n     * @param {Object} properties - 属性信息\r\n     * @param {Symbol} symbol - 渲染符号\r\n     */\r\n    constructor(geometry, properties, symbol) {\r\n        //该对象可订阅如下事件\r\n        super([\"click\", \"dblclick\", \"mouseover\", \"mouseout\"]);\r\n        /**\r\n         * 是否可见\r\n         */\r\n        this.visible = true;\r\n        this._geometry = geometry;\r\n        this._properties = properties;\r\n        this._symbol = symbol;\r\n    }\r\n    //****************重要说明***************\r\n    //有关 getter setter\r\n    //1.如按原先代码规则，private _variable  \r\n    //  只做为类内部函数服务：no getter no setter\r\n    //  只读：getter no setter\r\n    //  读写：getter + setter\r\n    //2.后经 public 的定义扩展，可得到：\r\n    //  public = private + getter + setter\r\n    //  另：public 可省略\r\n    //注：两种规则无差别，按习惯编写。\r\n    /**\r\n     * 渲染符号\r\n     * <p>\r\n     * 此处两个符号，本应不存在：\r\n     * Graphic vs Feature：Graphic作为图形，可以一图形对应一渲染符号；而Feature作为矢量要素，常规应该根据图层设定的渲染方式Renderer来得到各个Feature的渲染符号，而非单一设置。\r\n     * 此处加入的原因如下：\r\n     * 由于一些特例需求的存在，例如要素被选中状态，要素需要高亮符号等等，因此该符号独立于图层的渲染方式，原本针对这些特例会做一些专门的解决模式（可参考ArcGIS，设定图层专有的选中符号），\r\n     * 但此处为方便起见，暂保留该设置。\r\n     * </p>\r\n     * @type {Symbol}\r\n     */\r\n    get symbol() {\r\n        return this._symbol;\r\n    }\r\n    set symbol(value) {\r\n        this._symbol = value;\r\n    }\r\n    /**\r\n     * 空间图形\r\n     * @type {Geometry}\r\n     * @readonly\r\n     */\r\n    get geometry() {\r\n        return this._geometry;\r\n    }\r\n    /**\r\n     * 属性信息\r\n     * @type {Object}\r\n     * @readonly\r\n     */\r\n    get properties() {\r\n        return this._properties;\r\n    }\r\n    /**\r\n     * 标注符号\r\n     * <p>\r\n     * 参考渲染符号说明\r\n     * </p>\r\n     * @type {SimpleTextSymbol}\r\n     */\r\n    get text() {\r\n        return this._text;\r\n    }\r\n    set text(value) {\r\n        this._text = value;\r\n    }\r\n    /**\r\n     * 绘制要素\r\n     * 调用空间坐标信息进行图形绘制\r\n     * @param {CanvasRenderingContext2D} ctx - 绘图上下文\r\n     * @param {Projection} projection - 坐标投影转换\r\n     * @param {Bound} extent - 当前可视范围\r\n     * @param {Symbol} symbol - 渲染符号，一般来自于renderer\r\n     */\r\n    draw(ctx, projection = new WebMercator(), extent = projection.bound, symbol = new SimplePointSymbol()) {\r\n        if (this.visible)\r\n            this._geometry.draw(ctx, projection, extent, (this._symbol || symbol));\r\n    }\r\n    /**\r\n     * 判断是否在可视范围内\r\n     * @param {Projection} projection - 坐标投影转换\r\n     * @param {Bound} extent - 当前可视范围\r\n     * @return {boolean} 是否在可视范围内\r\n     */\r\n    intersect(projection = new WebMercator(), extent = projection.bound) {\r\n        if (this.visible)\r\n            return this._geometry.intersect(projection, extent);\r\n    }\r\n    /**\r\n     * 标注要素\r\n     * 调用空间坐标信息进行标注绘制\r\n     * @param {Field} field - 标注字段\r\n     * @param {CanvasRenderingContext2D} ctx - 绘图上下文\r\n     * @param {Projection} projection - 坐标投影转换\r\n     * @param {SimpleTextSymbol} symbol - 标注符号\r\n     */\r\n    label(field, ctx, projection = new WebMercator(), symbol = new SimpleTextSymbol()) {\r\n        if (this.visible)\r\n            this._geometry.label(this._properties[field.name], ctx, projection, this._text || symbol);\r\n    }\r\n    /**\r\n     * 交互判断\r\n     * 鼠标坐标是否落入要素\r\n     * @param {number} screenX - 鼠标屏幕坐标X\r\n     * @param {number} screenY - 鼠标屏幕坐标Y\r\n     * @param {string} event - 当前事件名称\r\n     * @return {boolean} 是否落入\r\n     */\r\n    contain(screenX, screenY, event = undefined) {\r\n        if (this.visible) {\r\n            const flag = this._geometry.contain(screenX, screenY);\r\n            if (event == \"mousemove\") {\r\n                if (!this._contained && flag) {\r\n                    //如果鼠标当前不在要素内，同时鼠标进入到要素内\r\n                    this.emit(\"mouseover\", { feature: this, screenX: screenX, screenY: screenY });\r\n                }\r\n                else if (this._contained && !flag) {\r\n                    //如果鼠标当前在要素内，同时鼠标移出到要素外\r\n                    this.emit(\"mouseout\", { feature: this, screenX: screenX, screenY: screenY });\r\n                }\r\n            }\r\n            this._contained = flag;\r\n            return flag;\r\n        }\r\n    }\r\n}\r\n","import { WebMercator } from \"../projection/web-mercator\";\r\nimport { Subject } from \"../util/subject\";\r\n/**\r\n * 图形要素\r\n * 区别与Feature，单纯的图形\r\n */\r\nexport class Graphic extends Subject {\r\n    /**\r\n     * 创建图形要素\r\n     * @param {Geometry} geometry - 空间图形\r\n     * @param {Symbol} symbol - 渲染符号\r\n     */\r\n    constructor(geometry, symbol) {\r\n        //该对象可订阅如下事件\r\n        super([\"click\", \"dblclick\", \"mouseover\", \"mouseout\"]);\r\n        /**\r\n         * 是否可见\r\n         */\r\n        this.visible = true;\r\n        this._geometry = geometry;\r\n        this._symbol = symbol;\r\n    }\r\n    /**\r\n     * 绘制图形\r\n     * @param {CanvasRenderingContext2D} ctx - 绘图上下文\r\n     * @param {Projection} projection - 坐标投影转换\r\n     * @param {Bound} extent - 当前可视范围\r\n     */\r\n    draw(ctx, projection = new WebMercator(), extent = projection.bound) {\r\n        if (this.visible)\r\n            this._geometry.draw(ctx, projection, extent, this._symbol);\r\n    }\r\n    /**\r\n     * 判断是否在可视范围内\r\n     * @param {Projection} projection - 坐标投影转换\r\n     * @param {Bound} extent - 当前可视范围\r\n     * @return {boolean} 是否在可视范围内\r\n     */\r\n    intersect(projection = new WebMercator(), extent = projection.bound) {\r\n        if (this.visible)\r\n            return this._geometry.intersect(projection, extent);\r\n    }\r\n    /**\r\n     * 交互判断\r\n     * 鼠标坐标是否落入图形\r\n     * @param {number} screenX - 鼠标屏幕坐标X\r\n     * @param {number} screenY - 鼠标屏幕坐标Y\r\n     * @param {string} event - 当前事件名称\r\n     * @return {boolean} 是否落入\r\n     */\r\n    contain(screenX, screenY, event = undefined) {\r\n        if (this.visible) {\r\n            const flag = this._geometry.contain(screenX, screenY);\r\n            if (event == \"mousemove\") {\r\n                if (!this._contained && flag) {\r\n                    //如果鼠标当前不在图形内，同时鼠标进入到图形内\r\n                    this.emit(\"mouseover\", { feature: this, screenX: screenX, screenY: screenY });\r\n                }\r\n                else if (this._contained && !flag) {\r\n                    //如果鼠标当前在图形内，同时鼠标移出到图形外\r\n                    this.emit(\"mouseout\", { feature: this, screenX: screenX, screenY: screenY });\r\n                }\r\n            }\r\n            this._contained = flag;\r\n            return flag;\r\n        }\r\n    }\r\n}\r\n","import { Bound } from \"../util/bound\";\r\nimport { SimplePointSymbol, SimpleTextSymbol } from \"../symbol/symbol\";\r\nimport { WebMercator } from \"../projection/web-mercator\";\r\n/**\r\n * 坐标类型\r\n * @enum {number}\r\n */\r\nexport var CoordinateType;\r\n(function (CoordinateType) {\r\n    /**\r\n     * 经纬度坐标\r\n     */\r\n    CoordinateType[CoordinateType[\"Latlng\"] = 1] = \"Latlng\";\r\n    /**\r\n     * 地理平面坐标\r\n     */\r\n    CoordinateType[CoordinateType[\"Projection\"] = 2] = \"Projection\";\r\n    /**\r\n     * 屏幕平面坐标\r\n     */\r\n    CoordinateType[CoordinateType[\"Screen\"] = 3] = \"Screen\";\r\n})(CoordinateType || (CoordinateType = {}));\r\n/**\r\n * 图形类型\r\n * @enum {number}\r\n */\r\nexport var GeometryType;\r\n(function (GeometryType) {\r\n    /**\r\n     * 点\r\n     */\r\n    GeometryType[GeometryType[\"Point\"] = 1] = \"Point\";\r\n    /**\r\n     * 线\r\n     */\r\n    GeometryType[GeometryType[\"Polyline\"] = 2] = \"Polyline\";\r\n    /**\r\n     * 面\r\n     */\r\n    GeometryType[GeometryType[\"Polygon\"] = 3] = \"Polygon\";\r\n})(GeometryType || (GeometryType = {}));\r\n/**\r\n * 图形基类\r\n */\r\nexport class Geometry {\r\n    /**\r\n     * 投影变换虚函数\r\n     * @param {Projection} projection - 坐标投影转换\r\n     */\r\n    project(projection) { }\r\n    ;\r\n    /**\r\n     * 图形绘制虚函数\r\n     * @param {CanvasRenderingContext2D} ctx - 绘图上下文\r\n     * @param {Projection} projection - 坐标投影转换\r\n     * @param {Bound} extent - 当前可视范围\r\n     * @param {Symbol} symbol - 渲染符号\r\n     */\r\n    draw(ctx, projection = new WebMercator(), extent = projection.bound, symbol = new SimplePointSymbol()) { }\r\n    ;\r\n    /**\r\n     * 图形包络矩形与可见视图范围是否包含或相交\r\n     * @param {Projection} projection - 坐标投影转换\r\n     * @param {Bound} extent - 当前可视范围\r\n     * @return {boolean} 是否在可视范围内\r\n     */\r\n    intersect(projection = new WebMercator(), extent = projection.bound) {\r\n        if (!this._projected)\r\n            this.project(projection);\r\n        return extent.intersect(this._bound);\r\n    }\r\n    /**\r\n     * 获取图形中心点虚函数\r\n     * @param {CoordinateType} type - 坐标类型\r\n     * @param {Projection} projection - 坐标投影转换\r\n     * @return {number[]} 中心点坐标\r\n     */\r\n    getCenter(type = CoordinateType.Latlng, projection = new WebMercator()) { }\r\n    ;\r\n    /**\r\n     * 获取两个图形间距离\r\n     * @remarks\r\n     * 当前为两图形中心点间的直线距离\r\n     * 多用于聚合判断\r\n     * @param {Geometry} geometry - 另一图形\r\n     * @param {CoordinateType} type - 坐标类型\r\n     * @param {CanvasRenderingContext2D} ctx - 绘图上下文\r\n     * @param {Projection} projection - 坐标投影转换\r\n     * @return {number} 距离\r\n     */\r\n    distance(geometry, type, ctx, projection = new WebMercator()) {\r\n        const center = this.getCenter(type == CoordinateType.Screen ? CoordinateType.Projection : type, projection);\r\n        const point = geometry.getCenter(type == CoordinateType.Screen ? CoordinateType.Projection : type, projection);\r\n        if (type == CoordinateType.Screen) {\r\n            const matrix = ctx.getTransform();\r\n            const screenX1 = (matrix.a * center[0] + matrix.e), screenY1 = (matrix.d * center[1] + matrix.f);\r\n            const screenX2 = (matrix.a * point[0] + matrix.e), screenY2 = (matrix.d * point[1] + matrix.f);\r\n            return Math.sqrt((screenX2 - screenX1) * (screenX2 - screenX1) + (screenY2 - screenY1) * (screenY2 - screenY1));\r\n        }\r\n        else if (type == CoordinateType.Projection) {\r\n            return Math.sqrt((point[0] - center[0]) * (point[0] - center[0]) + (point[1] - center[1]) * (point[1] - center[1]));\r\n        }\r\n    }\r\n    /**\r\n     * 标注绘制\r\n     * @remarks\r\n     * 标注文本支持多行，/r/n换行\r\n     * @param {string} text - 标注文本\r\n     * @param {CanvasRenderingContext2D} ctx - 绘图上下文\r\n     * @param {Projection} projection - 坐标投影转换\r\n     * @param {SimpleTextSymbol} symbol - 标注符号\r\n     */\r\n    label(text, ctx, projection = new WebMercator(), symbol = new SimpleTextSymbol()) {\r\n        if (!text)\r\n            return;\r\n        if (!this._projected)\r\n            this.project(projection);\r\n        ctx.save();\r\n        ctx.strokeStyle = symbol.strokeStyle;\r\n        ctx.fillStyle = symbol.fillStyle;\r\n        ctx.lineWidth = symbol.lineWidth;\r\n        ctx.lineJoin = \"round\";\r\n        ctx.font = symbol.fontSize + \"px/1 \" + symbol.fontFamily + \" \" + symbol.fontWeight;\r\n        const center = this.getCenter(CoordinateType.Projection, projection);\r\n        const matrix = ctx.getTransform();\r\n        ctx.setTransform(1, 0, 0, 1, 0, 0);\r\n        //标注文本多行分割\r\n        const array = text.split(\"/r/n\");\r\n        //计算每一行宽度\r\n        let widths = array.map(str => ctx.measureText(str).width + symbol.padding * 2);\r\n        //取最大宽度，作为标注宽度\r\n        let width = Math.max(...widths);\r\n        //高度取决于：字体大小，以及行数*行距，以及标注框上下的留白padding\r\n        let height = symbol.fontSize * array.length + symbol.padding * 2 + symbol.padding * (array.length - 1);\r\n        const screenX = (matrix.a * center[0] + matrix.e);\r\n        const screenY = (matrix.d * center[1] + matrix.f);\r\n        //画标注外框\r\n        ctx.strokeRect(screenX + symbol.offsetX - symbol.padding, screenY + symbol.offsetY - symbol.padding, width, height);\r\n        //填充标注背景\r\n        ctx.fillRect(screenX + symbol.offsetX - symbol.padding, screenY + symbol.offsetY - symbol.padding, width, height);\r\n        ctx.textBaseline = \"top\";\r\n        ctx.fillStyle = symbol.fontColor;\r\n        //多行文本绘制\r\n        array.forEach((str, index) => {\r\n            ctx.fillText(str, screenX + symbol.offsetX + (width - widths[index]) / 2, screenY + symbol.offsetY + index * (symbol.fontSize + symbol.padding));\r\n        });\r\n        ctx.restore();\r\n    }\r\n    ;\r\n    /**\r\n     * 标注量算\r\n     * @remarks\r\n     * 标注文本支持多行，/r/n换行\r\n     * 目前用于寻找自动标注最合适的方位：top bottom left right\r\n     * @param {string} text - 标注文本\r\n     * @param {CanvasRenderingContext2D} ctx - 绘图上下文\r\n     * @param {Projection} projection - 坐标投影转换\r\n     * @param {SimpleTextSymbol} symbol - 标注符号\r\n     */\r\n    measure(text, ctx, projection = new WebMercator(), symbol = new SimpleTextSymbol()) {\r\n        if (!text)\r\n            return;\r\n        ctx.save();\r\n        ctx.font = symbol.fontSize + \"px/1 \" + symbol.fontFamily + \" \" + symbol.fontWeight;\r\n        const center = this.getCenter(CoordinateType.Projection, projection);\r\n        const matrix = ctx.getTransform();\r\n        ctx.setTransform(1, 0, 0, 1, 0, 0);\r\n        //标注文本多行分割\r\n        const array = text.split(\"/r/n\");\r\n        //计算每一行宽度\r\n        let widths = array.map(str => ctx.measureText(str).width + symbol.padding * 2);\r\n        //取最大宽度，作为标注宽度\r\n        let width = Math.max(...widths);\r\n        //高度取决于：字体大小，以及行数*行距，以及标注框上下的留白padding\r\n        let height = symbol.fontSize * array.length + symbol.padding * 2 + symbol.padding * (array.length - 1);\r\n        const screenX = (matrix.a * center[0] + matrix.e);\r\n        const screenY = (matrix.d * center[1] + matrix.f);\r\n        ctx.restore();\r\n        return new Bound(screenX + symbol.offsetX - symbol.padding, screenY + symbol.offsetY - symbol.padding, screenX + symbol.offsetX - symbol.padding + width, screenY + symbol.offsetY - symbol.padding + height);\r\n    }\r\n    ;\r\n    /**\r\n     * 是否包含传入坐标\r\n     * @remarks 主要用于鼠标交互\r\n     * @param {number} screenX - 鼠标屏幕坐标X\r\n     * @param {number} screenX - 鼠标屏幕坐标Y\r\n     * @return {boolean} 是否落入\r\n     */\r\n    contain(screenX, screenY) { return false; }\r\n}\r\n","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nimport { Geometry, CoordinateType } from \"./geometry\";\r\nimport { Bound } from \"../util/bound\";\r\nimport { SimplePointSymbol } from \"../symbol/symbol\";\r\nimport { WebMercator } from \"../projection/web-mercator\";\r\n/**\r\n * 点\r\n */\r\nexport class Point extends Geometry {\r\n    /**\r\n     * 创建点\r\n     * @param {number} lng - 经度\r\n     * @param {number} lat - 纬度\r\n     */\r\n    constructor(lng, lat) {\r\n        super();\r\n        this._lng = lng;\r\n        this._lat = lat;\r\n    }\r\n    /**\r\n     * 经纬度-经度\r\n     */\r\n    get lng() {\r\n        return this._lng;\r\n    }\r\n    /**\r\n     * 经纬度-纬度\r\n     */\r\n    get lat() {\r\n        return this._lat;\r\n    }\r\n    /**\r\n     * 平面坐标-X\r\n     */\r\n    get x() {\r\n        return this._x;\r\n    }\r\n    /**\r\n     * 平面坐标-Y\r\n     */\r\n    get y() {\r\n        return this._y;\r\n    }\r\n    ;\r\n    /**\r\n     * 投影变换\r\n     * @param {Projection} projection - 坐标投影转换\r\n     */\r\n    project(projection) {\r\n        this._projection = projection;\r\n        //经纬度转平面坐标\r\n        [this._x, this._y] = this._projection.project([this._lng, this._lat]);\r\n        //TODO: bound tolerance.\r\n        //包络矩形，当前是点，可考虑加入buffer或tolerance\r\n        this._bound = new Bound(this._x, this._y, this._x, this._y);\r\n        this._projected = true;\r\n    }\r\n    /**\r\n     * 绘制点\r\n     * @param {CanvasRenderingContext2D} ctx - 绘图上下文\r\n     * @param {Projection} projection - 坐标投影转换\r\n     * @param {Bound} extent - 当前可视范围\r\n     * @param {Symbol} symbol - 渲染符号\r\n     */\r\n    draw(ctx, projection = new WebMercator(), extent = projection.bound, symbol = new SimplePointSymbol()) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            //如第一次绘制，没有经过投影，则先完成投影，以后可跳过\r\n            if (!this._projected)\r\n                this.project(projection);\r\n            //再判断是否在可视范围内\r\n            if (!extent.intersect(this._bound))\r\n                return;\r\n            //获得屏幕坐标，以便根据symbol来进行绘制\r\n            //TODO: cache screenXY & symbol for redraw.\r\n            const matrix = ctx.getTransform();\r\n            this._screenX = (matrix.a * this._x + matrix.e);\r\n            this._screenY = (matrix.d * this._y + matrix.f);\r\n            this._symbol = symbol;\r\n            this._symbol.draw(ctx, this._screenX, this._screenY);\r\n        });\r\n    }\r\n    ;\r\n    /**\r\n     * 获取中心点\r\n     * @param {CoordinateType} type - 坐标类型\r\n     * @param {Projection} projection - 坐标投影转换\r\n     * @return {number[]} 中心点坐标\r\n     */\r\n    getCenter(type = CoordinateType.Latlng, projection = new WebMercator()) {\r\n        if (!this._projected)\r\n            this.project(projection);\r\n        if (type === CoordinateType.Latlng) {\r\n            return [this._lng, this._lat];\r\n        }\r\n        else {\r\n            return [this._x, this._y];\r\n        }\r\n    }\r\n    /**\r\n     * 是否包含传入坐标\r\n     * @remarks\r\n     * 由于点是0维，主要根据渲染的符号大小来判断传入坐标是否落到点内\r\n     * @param {number} screenX - 鼠标屏幕坐标X\r\n     * @param {number} screenX - 鼠标屏幕坐标Y\r\n     * @return {boolean} 是否落入\r\n     */\r\n    contain(screenX, screenY) {\r\n        return this._symbol ? this._symbol.contain(this._screenX, this._screenY, screenX, screenY) : false;\r\n    }\r\n}\r\n","import { Geometry, CoordinateType } from \"./geometry\";\r\nimport { Bound } from \"../util/bound\";\r\nimport { SimpleFillSymbol } from \"../symbol/symbol\";\r\nimport { WebMercator } from \"../projection/web-mercator\";\r\n/**\r\n * 面\r\n * @remarks\r\n * 数据结构：[ring[point[x,y]]]：such as [[[1,1],[2,2],[1,2]], [[1.5,1.5],[1.9,1.9],[1.5,1.9]]]\r\n */\r\nexport class Polygon extends Geometry {\r\n    /**\r\n     * 创建面\r\n     * @param {number[][][]} lnglats - 坐标集合，三维数组\r\n     */\r\n    constructor(lnglats) {\r\n        super();\r\n        this._lnglats = lnglats;\r\n    }\r\n    /**\r\n     * 经纬度\r\n     */\r\n    get lnglats() {\r\n        return this._lnglats;\r\n    }\r\n    /**\r\n     * 平面坐标\r\n     */\r\n    get coordinates() {\r\n        return this._coordinates;\r\n    }\r\n    ;\r\n    /**\r\n     * 投影变换\r\n     * @param {Projection} projection - 坐标投影转换\r\n     */\r\n    project(projection) {\r\n        this._projection = projection;\r\n        //经纬度转平面坐标\r\n        this._coordinates = this._lnglats.map((ring) => ring.map((point) => this._projection.project(point)));\r\n        //提取包络矩形\r\n        let xmin = Number.MAX_VALUE, ymin = Number.MAX_VALUE, xmax = -Number.MAX_VALUE, ymax = -Number.MAX_VALUE;\r\n        this._coordinates.forEach(ring => {\r\n            ring.forEach(point => {\r\n                xmin = Math.min(xmin, point[0]);\r\n                ymin = Math.min(ymin, point[1]);\r\n                xmax = Math.max(xmax, point[0]);\r\n                ymax = Math.max(ymax, point[1]);\r\n            });\r\n        });\r\n        this._bound = new Bound(xmin, ymin, xmax, ymax);\r\n    }\r\n    /**\r\n     * 绘制面\r\n     * @param {CanvasRenderingContext2D} ctx - 绘图上下文\r\n     * @param {Projection} projection - 坐标投影转换\r\n     * @param {Bound} extent - 当前可视范围\r\n     * @param {Symbol} symbol - 渲染符号\r\n     */\r\n    draw(ctx, projection = new WebMercator(), extent = projection.bound, symbol = new SimpleFillSymbol()) {\r\n        //如第一次绘制，没有经过投影，则先完成投影，以后可跳过\r\n        if (!this._projected)\r\n            this.project(projection);\r\n        //再判断是否在可视范围内\r\n        if (!extent.intersect(this._bound))\r\n            return;\r\n        const matrix = ctx.getTransform();\r\n        this._screen = this._coordinates.map(ring => {\r\n            return ring.map((point, index) => {\r\n                const screenX = (matrix.a * point[0] + matrix.e), screenY = (matrix.d * point[1] + matrix.f);\r\n                return [screenX, screenY];\r\n            });\r\n        });\r\n        //TODO: cache screenXY & symbol for redraw.\r\n        symbol.draw(ctx, this._screen);\r\n    }\r\n    /**\r\n     * 获取面的中心点\r\n     * @remarks\r\n     * from Leaflet\r\n     * @param {CoordinateType} type - 坐标类型\r\n     * @param {Projection} projection - 坐标投影转换\r\n     * @return {number[]} 中心点坐标\r\n     */\r\n    getCenter(type = CoordinateType.Latlng, projection = new WebMercator()) {\r\n        if (!this._projected)\r\n            this.project(projection);\r\n        let i, j, p1, p2, f, area, x, y, center, points = this._coordinates[0], len = points.length;\r\n        if (!len) {\r\n            return null;\r\n        }\r\n        // polygon centroid algorithm; only uses the first ring if there are multiple\r\n        area = x = y = 0;\r\n        for (i = 0, j = len - 1; i < len; j = i++) {\r\n            p1 = points[i];\r\n            p2 = points[j];\r\n            f = p1[1] * p2[0] - p2[1] * p1[0];\r\n            x += (p1[0] + p2[0]) * f;\r\n            y += (p1[1] + p2[1]) * f;\r\n            area += f * 3;\r\n        }\r\n        if (area === 0) {\r\n            // Polygon is so small that all points are on same pixel.\r\n            center = points[0];\r\n        }\r\n        else {\r\n            center = [x / area, y / area];\r\n        }\r\n        if (type === CoordinateType.Latlng) {\r\n            return projection.unproject(center);\r\n        }\r\n        else {\r\n            return center;\r\n        }\r\n    }\r\n    /**\r\n     * 是否包含传入坐标\r\n     * @remarks\r\n     * 点是不是落在面内\r\n     * from https://github.com/substack/point-in-polygon\r\n     * ray-casting algorithm based on\r\n     * http://www.ecse.rpi.edu/Homepages/wrf/Research/Short_Notes/pnpoly.html\r\n     * @param {number} screenX - 鼠标屏幕坐标X\r\n     * @param {number} screenX - 鼠标屏幕坐标Y\r\n     * @return {boolean} 是否落入\r\n     */\r\n    contain(screenX, screenY) {\r\n        const first = this._screen[0];\r\n        const others = this._screen.slice(1);\r\n        //first ring contained && others no contained\r\n        const _pointInPolygon = (point, vs) => {\r\n            let x = point[0], y = point[1];\r\n            let inside = false;\r\n            for (let i = 0, j = vs.length - 1; i < vs.length; j = i++) {\r\n                let xi = vs[i][0], yi = vs[i][1];\r\n                let xj = vs[j][0], yj = vs[j][1];\r\n                let intersect = ((yi > y) != (yj > y))\r\n                    && (x < (xj - xi) * (y - yi) / (yj - yi) + xi);\r\n                if (intersect)\r\n                    inside = !inside;\r\n            }\r\n            return inside;\r\n        };\r\n        return _pointInPolygon([screenX, screenY], first) && others.every(ring => !_pointInPolygon([screenX, screenY], ring));\r\n        //return this._screen.some(ring => this._pointInPolygon([screenX, screenY], ring));\r\n    }\r\n}\r\n","import { Geometry, CoordinateType } from \"./geometry\";\r\nimport { Bound } from \"../util/bound\";\r\nimport { SimpleLineSymbol } from \"../symbol/symbol\";\r\nimport { WebMercator } from \"../projection/web-mercator\";\r\n/**\r\n * 线\r\n * @remarks\r\n * 数据结构：such as [[1,1],[2,2],[1,2]]\r\n */\r\nexport class Polyline extends Geometry {\r\n    /**\r\n     * 创建线\r\n     * @param {number[][]} lnglats - 坐标集合，二维数组\r\n     */\r\n    constructor(lnglats) {\r\n        super();\r\n        /**\r\n         * 交互鼠标坐标到线垂直距离的可选范围\r\n         * @remarks\r\n         * 可选范围 = 容差 + 线宽\r\n         * TOLERANCE + symbol.lineWidth\r\n         */\r\n        this._tolerance = 4;\r\n        this._lnglats = lnglats;\r\n    }\r\n    /**\r\n     * 经纬度\r\n     */\r\n    get lnglats() {\r\n        return this._lnglats;\r\n    }\r\n    /**\r\n     * 平面坐标\r\n     */\r\n    get coordinates() {\r\n        return this._coordinates;\r\n    }\r\n    ;\r\n    /**\r\n     * 投影变换\r\n     * @param {Projection} projection - 坐标投影转换\r\n     */\r\n    project(projection) {\r\n        this._projection = projection;\r\n        //经纬度转平面坐标\r\n        this._coordinates = this._lnglats.map((point) => this._projection.project(point));\r\n        //提取包络矩形\r\n        let xmin = Number.MAX_VALUE, ymin = Number.MAX_VALUE, xmax = -Number.MAX_VALUE, ymax = -Number.MAX_VALUE;\r\n        this._coordinates.forEach(point => {\r\n            xmin = Math.min(xmin, point[0]);\r\n            ymin = Math.min(ymin, point[1]);\r\n            xmax = Math.max(xmax, point[0]);\r\n            ymax = Math.max(ymax, point[1]);\r\n        });\r\n        this._bound = new Bound(xmin, ymin, xmax, ymax);\r\n    }\r\n    /**\r\n     * 绘制线\r\n     * @param {CanvasRenderingContext2D} ctx - 绘图上下文\r\n     * @param {Projection} projection - 坐标投影转换\r\n     * @param {Bound} extent - 当前可视范围\r\n     * @param {Symbol} symbol - 渲染符号\r\n     */\r\n    draw(ctx, projection = new WebMercator(), extent = projection.bound, symbol = new SimpleLineSymbol()) {\r\n        //如第一次绘制，没有经过投影，则先完成投影，以后可跳过\r\n        if (!this._projected)\r\n            this.project(projection);\r\n        //再判断是否在可视范围内\r\n        if (!extent.intersect(this._bound))\r\n            return;\r\n        this._tolerance = Polyline.TOLERANCE + symbol.lineWidth;\r\n        const matrix = ctx.getTransform();\r\n        this._screen = this._coordinates.map((point, index) => {\r\n            const screenX = (matrix.a * point[0] + matrix.e), screenY = (matrix.d * point[1] + matrix.f);\r\n            return [screenX, screenY];\r\n        });\r\n        //TODO: cache screenXY & symbol for redraw.\r\n        symbol.draw(ctx, this._screen);\r\n    }\r\n    /**\r\n     * 获取线的中心点\r\n     * @remarks\r\n     * from Leaflet\r\n     * @param {CoordinateType} type - 坐标类型\r\n     * @param {Projection} projection - 坐标投影转换\r\n     * @return {number[]} 中心点坐标\r\n     */\r\n    getCenter(type = CoordinateType.Latlng, projection = new WebMercator()) {\r\n        if (!this._projected)\r\n            this.project(projection);\r\n        let i, halfDist, segDist, dist, p1, p2, ratio, points = this._coordinates, len = points.length;\r\n        if (!len) {\r\n            return null;\r\n        }\r\n        // polyline centroid algorithm; only uses the first ring if there are multiple\r\n        for (i = 0, halfDist = 0; i < len - 1; i++) {\r\n            halfDist += Math.sqrt((points[i + 1][0] - points[i][0]) * (points[i + 1][0] - points[i][0]) + (points[i + 1][1] - points[i][1]) * (points[i + 1][1] - points[i][1])) / 2;\r\n        }\r\n        let center;\r\n        // The line is so small in the current view that all points are on the same pixel.\r\n        if (halfDist === 0) {\r\n            center = points[0];\r\n        }\r\n        for (i = 0, dist = 0; i < len - 1; i++) {\r\n            p1 = points[i];\r\n            p2 = points[i + 1];\r\n            segDist = Math.sqrt((p2[0] - p1[0]) * (p2[0] - p1[0]) + (p2[1] - p1[1]) * (p2[1] - p1[1]));\r\n            dist += segDist;\r\n            if (dist > halfDist) {\r\n                ratio = (dist - halfDist) / segDist;\r\n                center = [\r\n                    p2[0] - ratio * (p2[0] - p1[0]),\r\n                    p2[1] - ratio * (p2[1] - p1[1])\r\n                ];\r\n            }\r\n        }\r\n        if (type === CoordinateType.Latlng) {\r\n            return projection.unproject(center);\r\n        }\r\n        else {\r\n            return center;\r\n        }\r\n    }\r\n    /**\r\n     * 是否包含传入坐标\r\n     * @remarks\r\n     * 线是1维，所以要设置一个tolerance容差，来判断坐标是否落到线上\r\n     * @param {number} screenX - 鼠标屏幕坐标X\r\n     * @param {number} screenX - 鼠标屏幕坐标Y\r\n     * @return {boolean} 是否落入\r\n     */\r\n    contain(screenX, screenY) {\r\n        let p2;\r\n        //from Leaflet\r\n        //点到线段的距离，垂直距离\r\n        const _distanceToSegment = (p, p1, p2) => {\r\n            let x = p1[0], y = p1[1], dx = p2[0] - x, dy = p2[1] - y, dot = dx * dx + dy * dy, t;\r\n            if (dot > 0) {\r\n                t = ((p[0] - x) * dx + (p[1] - y) * dy) / dot;\r\n                if (t > 1) {\r\n                    x = p2[0];\r\n                    y = p2[1];\r\n                }\r\n                else if (t > 0) {\r\n                    x += dx * t;\r\n                    y += dy * t;\r\n                }\r\n            }\r\n            dx = p[0] - x;\r\n            dy = p[1] - y;\r\n            return Math.sqrt(dx * dx + dy * dy);\r\n        };\r\n        const distance = this._screen.reduce((acc, cur) => {\r\n            if (p2) {\r\n                const p1 = p2;\r\n                p2 = cur;\r\n                return Math.min(acc, _distanceToSegment([screenX, screenY], p1, p2));\r\n            }\r\n            else {\r\n                p2 = cur;\r\n                return acc;\r\n            }\r\n        }, Number.MAX_VALUE);\r\n        return distance <= this._tolerance;\r\n    }\r\n}\r\n/**\r\n * 容差\r\n * @remarks\r\n * 用于交互（线宽较小的情况下，难以选中）\r\n * screen pixel\r\n */\r\nPolyline.TOLERANCE = 4;\r\n","export * from './map';\r\nexport * from './data/feature-class';\r\nexport * from './data/field';\r\nexport * from './element/graphic';\r\nexport * from './element/feature';\r\nexport * from './geometry/geometry';\r\nexport * from './geometry/point';\r\nexport * from './geometry/polyline';\r\nexport * from './geometry/polygon';\r\nexport * from './label/collision';\r\nexport * from './label/label';\r\nexport * from './layer/layer';\r\nexport * from './layer/graphic-layer';\r\nexport * from './layer/feature-layer';\r\nexport * from './projection/projection';\r\nexport * from './projection/web-mercator';\r\nexport * from './projection/bd09';\r\nexport * from './projection/gcj02';\r\nexport * from './symbol/symbol';\r\nexport * from './renderer/renderer';\r\nexport * from './renderer/simple-renderer';\r\nexport * from './renderer/category-renderer';\r\nexport * from './renderer/class-renderer';\r\nexport * from './util/bound';\r\nexport * from './util/color';\r\nexport * from './util/subject';\r\nexport * from './animation/animation';\r\nexport * from './animation/particle-animation';\r\n","import { CoordinateType } from \"../geometry/geometry\";\r\nimport { WebMercator } from \"../projection/web-mercator\";\r\n/**\r\n * 冲突检测基类\r\n */\r\nexport class Collision {\r\n    /**\r\n     * 冲突检测\r\n     * @param {Feature[]} features - 准备绘制标注的要素集合\r\n     * @param {Field} field - 标注字段\r\n     * @param {SimpleTextSymbol} symbol - 标注文本符号\r\n     * @param {CanvasRenderingContext2D} ctx - 绘图上下文\r\n     * @param {Projection} projection - 坐标投影转换\r\n     * @return {Feature[]} 返回可绘制标注的要素集合\r\n     */\r\n    test(features, field, symbol, ctx, projection = new WebMercator()) { return []; }\r\n}\r\n/**\r\n * 无检测机制\r\n */\r\nexport class NullCollision {\r\n    /**\r\n     * 冲突检测\r\n     * @param {Feature[]} features - 准备绘制标注的要素集合\r\n     * @param {Field} field - 标注字段\r\n     * @param {SimpleTextSymbol} symbol - 标注文本符号\r\n     * @param {CanvasRenderingContext2D} ctx - 绘图上下文\r\n     * @param {Projection} projection - 坐标投影转换\r\n     * @return {Feature[]} 返回可绘制标注的要素集合\r\n     */\r\n    test(features, field, symbol, ctx, projection = new WebMercator()) {\r\n        //没有任何检测逻辑，直接原样返回\r\n        return features;\r\n    }\r\n}\r\n/**\r\n * 简单碰撞冲突\r\n * @remarks\r\n * 类似聚合，距离判断，速度快\r\n */\r\nexport class SimpleCollision {\r\n    constructor() {\r\n        /**\r\n         * 检测距离\r\n         * @remarks\r\n         * 单位 pixel\r\n         */\r\n        this.distance = 50;\r\n    }\r\n    /**\r\n     * 冲突检测\r\n     * @param {Feature[]} features - 准备绘制标注的要素集合\r\n     * @param {Field} field - 标注字段\r\n     * @param {SimpleTextSymbol} symbol - 标注文本符号\r\n     * @param {CanvasRenderingContext2D} ctx - 绘图上下文\r\n     * @param {Projection} projection - 坐标投影转换\r\n     * @return {Feature[]} 返回可绘制标注的要素集合\r\n     */\r\n    test(features, field, symbol, ctx, projection = new WebMercator()) {\r\n        //根据距离聚合\r\n        return features.reduce((acc, cur) => {\r\n            const item = acc.find((item) => {\r\n                const distance = cur.geometry.distance(item.geometry, CoordinateType.Screen, ctx, projection);\r\n                return distance <= this.distance;\r\n            });\r\n            if (!item)\r\n                acc.push(cur);\r\n            return acc;\r\n        }, []); // [feature]\r\n    }\r\n}\r\n/**\r\n * 叠盖碰撞冲突\r\n * @remarks\r\n * 试算标注宽高，并和已通过检测的标注，进行边界的交叉判断，速度慢\r\n */\r\nexport class CoverCollision {\r\n    constructor() {\r\n        /**\r\n         * 已通过检测的标注的边界集合\r\n         */\r\n        this._bounds = [];\r\n        /**\r\n         * 判断边界碰撞时的buffer\r\n         * @remarks\r\n         * buffer越小，标注越密，单位：pixel\r\n         */\r\n        this.buffer = 10;\r\n    }\r\n    /**\r\n     * 冲突检测\r\n     * @param {Feature[]} features - 准备绘制标注的要素集合\r\n     * @param {Field} field - 标注字段\r\n     * @param {SimpleTextSymbol} symbol - 标注文本符号\r\n     * @param {CanvasRenderingContext2D} ctx - 绘图上下文\r\n     * @param {Projection} projection - 坐标投影转换\r\n     * @return {Feature[]} 返回可绘制标注的要素集合\r\n     */\r\n    test(features, field, symbol, ctx, projection = new WebMercator()) {\r\n        if (!field || !symbol)\r\n            return [];\r\n        this._bounds = [];\r\n        //根据标注宽高的量算，得到标注的size，并和已通过检测的标注，进行边界的交叉判断，来决定是否可绘制该要素的标注\r\n        return features.reduce((acc, cur) => {\r\n            const bound = cur.geometry.measure(cur.properties[field.name], ctx, projection, symbol);\r\n            if (bound) {\r\n                bound.buffer(this.buffer);\r\n                const item = this._bounds.find(item => item.intersect(bound));\r\n                if (!item) {\r\n                    acc.push(cur);\r\n                    this._bounds.push(bound);\r\n                }\r\n            }\r\n            return acc;\r\n        }, []); // [feature]\r\n    }\r\n}\r\n","import { SimpleTextSymbol } from \"../symbol/symbol\";\r\nimport { SimpleCollision } from \"./collision\";\r\nimport { WebMercator } from \"../projection/web-mercator\";\r\n/**\r\n * 图层标注设置\r\n */\r\nexport class Label {\r\n    constructor() {\r\n        /**\r\n         * 标注符号\r\n         * @remarks\r\n         * 参考Renderer和Feature中的相关重要说明\r\n         */\r\n        this.symbol = new SimpleTextSymbol();\r\n        /**\r\n         * 标注冲突解决方式\r\n         */\r\n        this.collision = new SimpleCollision();\r\n    }\r\n    /**\r\n     * 绘制图层标注\r\n     * @param {Feature[]} features - 准备绘制标注的要素集合\r\n     * @param {CanvasRenderingContext2D} ctx - 绘图上下文\r\n     * @param {Projection} projection - 坐标投影转换\r\n     */\r\n    draw(features, ctx, projection = new WebMercator()) {\r\n        //通过冲突检测，得到要绘制的要素集合\r\n        const remain = this.collision.test(features, this.field, this.symbol, ctx, projection);\r\n        //遍历绘制要素标注\r\n        remain.forEach((feature) => {\r\n            feature.label(this.field, ctx, projection, this.symbol);\r\n        });\r\n    }\r\n}\r\n","import { Layer } from \"./layer\";\r\nimport { WebMercator } from \"../projection/web-mercator\";\r\nimport { SimpleRenderer } from \"../renderer/simple-renderer\";\r\nimport { CategoryRenderer } from \"../renderer/category-renderer\";\r\nimport { ClassRenderer } from \"../renderer/class-renderer\";\r\nimport { GeometryType, CoordinateType } from \"../geometry/geometry\";\r\nimport { Point } from \"../geometry/point\";\r\nimport { ClusterSymbol } from \"../symbol/symbol\";\r\n/**\r\n * 矢量要素图层\r\n */\r\nexport class FeatureLayer extends Layer {\r\n    constructor() {\r\n        super(...arguments);\r\n        /**\r\n         * 图层可见缩放级别\r\n         */\r\n        this._zoom = [3, 20];\r\n        /**\r\n         * 是否显示标注\r\n         */\r\n        this.labeled = false;\r\n        /**\r\n         * 是否聚合\r\n         */\r\n        this.cluster = false;\r\n    }\r\n    /**\r\n     * 矢量要素类（数据源）\r\n     */\r\n    get featureClass() {\r\n        return this._featureClass;\r\n    }\r\n    /**\r\n     * 矢量要素类（数据源）\r\n     */\r\n    set featureClass(value) {\r\n        this._featureClass = value;\r\n    }\r\n    /**\r\n     * 图层标注设置\r\n     */\r\n    set label(value) {\r\n        this._label = value;\r\n    }\r\n    /**\r\n     * 图层渲染方式设置\r\n     */\r\n    set renderer(value) {\r\n        this._renderer = value;\r\n    }\r\n    /**\r\n    * 重写事件注册监听\r\n    * @remarks\r\n    * 对图层的监听，重写为遍历对该图层下所有要素的监听\r\n    * 该写法只是一种简写，无他。\r\n    * @param {string} event - 事件名称\r\n    * @param {Function} handler - 回调函数\r\n    */\r\n    on(event, handler) {\r\n        this._featureClass.features.forEach((feature) => {\r\n            feature.on(event, handler);\r\n        });\r\n    }\r\n    /**\r\n     * 重写事件取消监听\r\n     * @param {string} event - 事件名称\r\n     * @param {Function} handler - 回调函数\r\n     */\r\n    off(event, handler) {\r\n        this._featureClass.features.forEach((feature) => {\r\n            feature.off(event, handler);\r\n        });\r\n    }\r\n    /**\r\n     * 重写事件激发\r\n     * @param {string} event - 事件名称\r\n     * @param {Object} param - 事件参数\r\n     */\r\n    emit(event, param) {\r\n        this._featureClass.features.forEach((feature) => {\r\n            feature.emit(event, param);\r\n        });\r\n    }\r\n    /**\r\n     * 绘制图层\r\n     * @remarks\r\n     * 遍历图形集合进行绘制\r\n     * @param {CanvasRenderingContext2D} ctx - 绘图上下文\r\n     * @param {Projection} projection - 坐标投影转换\r\n     * @param {Bound} extent - 当前可视范围\r\n     * @param {number} zoom - 当前缩放级别\r\n     */\r\n    draw(ctx, projection = new WebMercator(), extent = projection.bound, zoom = 10) {\r\n        if (this.visible && this._zoom[0] <= zoom && this._zoom[1] >= zoom) {\r\n            //过滤可见视图范围内的要素\r\n            const features = this._featureClass.features.filter((feature) => feature.intersect(projection, extent));\r\n            //获取当前渲染方式下，某一要素对应的渲染符号\r\n            const _getSymbol = (feature) => {\r\n                if (this._renderer instanceof SimpleRenderer) {\r\n                    return this._renderer.symbol;\r\n                }\r\n                else if (this._renderer instanceof CategoryRenderer) {\r\n                    const renderer = this._renderer;\r\n                    const item = renderer.items.find(item => item.value == feature.properties[renderer.field.name]);\r\n                    return item.symbol;\r\n                }\r\n                else if (this._renderer instanceof ClassRenderer) {\r\n                    const renderer = this._renderer;\r\n                    const item = renderer.items.find(item => item.low <= feature.properties[renderer.field.name] && item.high >= feature.properties[renderer.field.name]);\r\n                    return item.symbol;\r\n                }\r\n            };\r\n            //如果是点图层，同时又设置为聚合显示时\r\n            if (this._featureClass.type == GeometryType.Point && this.cluster) {\r\n                //简单距离聚合\r\n                const cluster = features.reduce((acc, cur) => {\r\n                    if (cur.geometry instanceof Point) {\r\n                        const point = cur.geometry;\r\n                        const item = acc.find((item) => {\r\n                            const distance = point.distance(item.feature.geometry, CoordinateType.Screen, ctx, projection);\r\n                            return distance <= 50;\r\n                        });\r\n                        if (item) {\r\n                            item.count += 1;\r\n                        }\r\n                        else {\r\n                            acc.push({ feature: cur, count: 1 });\r\n                        }\r\n                        return acc;\r\n                    }\r\n                }, []); // [{feature, count}]\r\n                cluster.forEach((item) => {\r\n                    if (item.count == 1) {\r\n                        item.feature.draw(ctx, projection, extent, _getSymbol(item.feature));\r\n                    }\r\n                    else {\r\n                        item.feature.draw(ctx, projection, extent, new ClusterSymbol(item.count));\r\n                    }\r\n                });\r\n            }\r\n            else {\r\n                //不是聚合时，正常绘制图层下各要素\r\n                features.forEach((feature) => {\r\n                    feature.draw(ctx, projection, extent, _getSymbol(feature));\r\n                });\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * 绘制标注\r\n     * @remarks\r\n     * 本应起名为label，但与属性中setter重名，故起名为drawLabel，无奈。。。\r\n     * @param {CanvasRenderingContext2D} ctx - 绘图上下文\r\n     * @param {Projection} projection - 坐标投影转换\r\n     * @param {Bound} extent - 当前可视范围\r\n     * @param {number} zoom - 当前缩放级别\r\n     */\r\n    drawLabel(ctx, projection = new WebMercator(), extent = projection.bound, zoom = 10) {\r\n        if (this.visible && !this.cluster && this._zoom[0] <= zoom && this._zoom[1] >= zoom) {\r\n            const features = this._featureClass.features.filter((feature) => feature.intersect(projection, extent));\r\n            this._label.draw(features, ctx, projection);\r\n        }\r\n    }\r\n    /**\r\n     * 图层交互\r\n     * @remarks 当前鼠标是否落入该图层某要素\r\n     * @param {number} screenX - 鼠标屏幕坐标X\r\n     * @param {number} screenX - 鼠标屏幕坐标Y\r\n     * @param {Projection} projection - 坐标投影转换\r\n     * @param {Bound} extent - 当前可视范围\r\n     * @param {number} zoom - 当前缩放级别\r\n     * @param {string} event - 当前事件名称\r\n     * @return {boolean} 是否落入\r\n     */\r\n    contain(screenX, screenY, projection = new WebMercator(), extent = projection.bound, zoom = 10, event = undefined) {\r\n        if (this.visible && this._zoom[0] <= zoom && this._zoom[1] >= zoom) {\r\n            //if call Array.some, maybe abort mouseout last feature which mouseover!!! but filter maybe cause slow!!!no choice\r\n            //return this._featureClass.features.filter((feature: Feature) => feature.intersect(projection, extent)).some( (feature: Feature) => {\r\n            //遍历与当前视图与相交的要素，判断坐标是否落入相应要素\r\n            const features = this._featureClass.features.filter((feature) => feature.intersect(projection, extent)).filter((feature) => {\r\n                return feature.contain(screenX, screenY, event);\r\n            });\r\n            if (features.length > 0) {\r\n                //如为dblclick、click，则触发该图形的对应事件\r\n                //多个时，默认只触发第一个，该行为可被重写。\r\n                if (event == \"dblclick\") {\r\n                    features[0].emit(\"dblclick\", { feature: features[0], screenX: screenX, screenY: screenY });\r\n                }\r\n                else if (event == \"click\") {\r\n                    features[0].emit(\"click\", { feature: features[0], screenX: screenX, screenY: screenY });\r\n                }\r\n                return true;\r\n            }\r\n            else {\r\n                return false;\r\n            }\r\n        }\r\n    }\r\n}\r\n","import { Layer } from \"./layer\";\r\nimport { WebMercator } from \"../projection/web-mercator\";\r\n/**\r\n * 图形要素图层\r\n */\r\nexport class GraphicLayer extends Layer {\r\n    constructor() {\r\n        super(...arguments);\r\n        /**\r\n         * 图形要素集合\r\n         */\r\n        this._graphics = [];\r\n    }\r\n    /**\r\n     * 重写事件注册监听\r\n     * @remarks\r\n     * 对图层的监听，重写为遍历对该图层下所有要素的监听\r\n     * 该写法只是一种简写，无他。\r\n     * @param {string} event - 事件名称\r\n     * @param {Function} handler - 回调函数\r\n     */\r\n    on(event, handler) {\r\n        this._graphics.forEach((graphic) => {\r\n            graphic.on(event, handler);\r\n        });\r\n    }\r\n    /**\r\n     * 重写事件取消监听\r\n     * @param {string} event - 事件名称\r\n     * @param {Function} handler - 回调函数\r\n     */\r\n    off(event, handler) {\r\n        this._graphics.forEach((graphic) => {\r\n            graphic.off(event, handler);\r\n        });\r\n    }\r\n    /**\r\n     * 重写事件激发\r\n     * @param {string} event - 事件名称\r\n     * @param {Object} param - 事件参数\r\n     */\r\n    emit(event, param) {\r\n        this._graphics.forEach((graphic) => {\r\n            graphic.emit(event, param);\r\n        });\r\n    }\r\n    /**\r\n     * 添加图形\r\n     * @param {Graphic} graphic - 图形\r\n     */\r\n    add(graphic) {\r\n        this._graphics.push(graphic);\r\n    }\r\n    /**\r\n     * 删除图形\r\n     * @param {Graphic} graphic - 图形\r\n     */\r\n    remove(graphic) {\r\n        const index = this._graphics.findIndex(item => item === graphic);\r\n        index != -1 && this._graphics.splice(index, 1);\r\n    }\r\n    /**\r\n     * 清空图形集合\r\n     */\r\n    clear() {\r\n        this._graphics = [];\r\n    }\r\n    /**\r\n     * 绘制图层\r\n     * @remarks\r\n     * 遍历图形集合进行绘制\r\n     * @param {CanvasRenderingContext2D} ctx - 绘图上下文\r\n     * @param {Projection} projection - 坐标投影转换\r\n     * @param {Bound} extent - 当前可视范围\r\n     * @param {number} zoom - 当前缩放级别\r\n     */\r\n    draw(ctx, projection = new WebMercator(), extent = projection.bound, zoom = 10) {\r\n        if (this.visible) {\r\n            this._graphics.forEach((graphic) => {\r\n                graphic.draw(ctx, projection, extent);\r\n            });\r\n        }\r\n    }\r\n    /**\r\n     * 图层交互\r\n     * @remarks 当前鼠标是否落入该图层某要素\r\n     * @param {number} screenX - 鼠标屏幕坐标X\r\n     * @param {number} screenX - 鼠标屏幕坐标Y\r\n     * @param {Projection} projection - 坐标投影转换\r\n     * @param {Bound} extent - 当前可视范围\r\n     * @param {number} zoom - 当前缩放级别\r\n     * @param {string} event - 当前事件名称\r\n     * @return {boolean} 是否落入\r\n     */\r\n    contain(screenX, screenY, projection = new WebMercator(), extent = projection.bound, zoom = 10, event = undefined) {\r\n        if (this.visible) {\r\n            //遍历可视范围内的图形，判断是否落入某个图形\r\n            const graphics = this._graphics.filter((graphic) => graphic.intersect(projection, extent)).filter((graphic) => {\r\n                return graphic.contain(screenX, screenY, event);\r\n            });\r\n            if (graphics.length > 0) {\r\n                //如为dblclick、click，则触发该图形的对应事件\r\n                //多个时，默认只触发第一个，该行为可被重写。\r\n                if (event == \"dblclick\") {\r\n                    graphics[0].emit(\"dblclick\", { graphic: graphics[0], screenX: screenX, screenY: screenY });\r\n                }\r\n                else if (event == \"click\") {\r\n                    graphics[0].emit(\"click\", { graphic: graphics[0], screenX: screenX, screenY: screenY });\r\n                }\r\n                return true;\r\n            }\r\n            else {\r\n                return false;\r\n            }\r\n        }\r\n    }\r\n}\r\n","import { WebMercator } from \"../projection/web-mercator\";\r\nimport { Subject } from \"../util/subject\";\r\n/**\r\n * 图层基类\r\n */\r\nexport class Layer extends Subject {\r\n    /**\r\n     * 创建图层\r\n     */\r\n    constructor() {\r\n        super([]);\r\n        /**\r\n         * 图层可见设置\r\n         */\r\n        this._visible = true;\r\n        /**\r\n         * 图层可交互设置\r\n         */\r\n        this._interactive = true;\r\n    }\r\n    /**\r\n     * 图层是否可见\r\n     */\r\n    get visible() {\r\n        return this._visible;\r\n    }\r\n    /**\r\n     * 图层可见设置\r\n     */\r\n    set visible(value) {\r\n        this._visible = value;\r\n    }\r\n    /**\r\n     * 图层是否可交互\r\n     */\r\n    get interactive() {\r\n        return this._interactive;\r\n    }\r\n    /**\r\n     * 图层可交互设置\r\n     */\r\n    set interactive(value) {\r\n        this._interactive = value;\r\n    }\r\n    /**\r\n     * 绘制图层\r\n     * @param {CanvasRenderingContext2D} ctx - 绘图上下文\r\n     * @param {Projection} projection - 坐标投影转换\r\n     * @param {Bound} extent - 当前可视范围\r\n     * @param {number} zoom - 当前缩放级别\r\n     */\r\n    draw(ctx, projection = new WebMercator(), extent = projection.bound, zoom = 10) { }\r\n    ;\r\n    /**\r\n     * 图层交互\r\n     * @remarks 当前鼠标是否落入该图层某要素\r\n     * @param {number} screenX - 鼠标屏幕坐标X\r\n     * @param {number} screenX - 鼠标屏幕坐标Y\r\n     * @param {Projection} projection - 坐标投影转换\r\n     * @param {Bound} extent - 当前可视范围\r\n     * @param {number} zoom - 当前缩放级别\r\n     * @param {string} event - 当前事件名称\r\n     * @return {boolean} 是否落入\r\n     */\r\n    contain(screenX, screenY, projection = new WebMercator(), extent = projection.bound, zoom = 10, event = undefined) { return false; }\r\n}\r\n","import { Bound } from \"./util/bound\";\r\nimport { WebMercator } from \"./projection/web-mercator\";\r\nimport { FeatureLayer } from \"./layer/feature-layer\";\r\nimport { GraphicLayer } from \"./layer/graphic-layer\";\r\nimport { Subject } from \"./util/subject\";\r\nimport { Animator } from \"./animator\";\r\n/**\r\n* 地图\r\n*/\r\nexport class Map extends Subject {\r\n    /**\r\n     * 创建地图\r\n     * @param {string | HTMLDivElement} id - HTMLDivElement | id\r\n     */\r\n    constructor(id) {\r\n        //extent: 视图范围更新时\r\n        //click:  单击地图时\r\n        //dblclick: 双击地图时\r\n        //mousemove: 鼠标移动时\r\n        //resize: 视图容器尺寸调整时\r\n        super([\"extent\", \"click\", \"dblclick\", \"mousemove\", \"resize\"]);\r\n        //默认为地图添加一个图形图层，为地图添加图形接口提供便捷，语法糖而已，无他\r\n        this._defaultGraphicLayer = new GraphicLayer();\r\n        //图层集合\r\n        this._layers = [];\r\n        //地图缩放等级\r\n        this._zoom = 1;\r\n        //地图视图中心\r\n        this._center = [0, 0];\r\n        //地图漫游操作相关私有变量及标记\r\n        //辅助响应mousedown mouseup，完成地图漫游（平移）\r\n        this._drag = {\r\n            //是否处于漫游状态\r\n            flag: false,\r\n            //漫游起始坐标\r\n            start: {\r\n                x: 0,\r\n                y: 0\r\n            },\r\n            //漫游结束坐标\r\n            end: {\r\n                x: 0,\r\n                y: 0\r\n            }\r\n        };\r\n        this._container = id instanceof HTMLDivElement ? id : document.getElementById(id);\r\n        //create canvas\r\n        this._canvas = document.createElement(\"canvas\");\r\n        this._canvas.style.cssText = \"position: absolute; height: 100%; width: 100%; z-index: 100\";\r\n        this._canvas.width = this._container.clientWidth;\r\n        this._canvas.height = this._container.clientHeight;\r\n        this._container.appendChild(this._canvas);\r\n        this._ctx = this._canvas.getContext(\"2d\");\r\n        //bind this，请参考js中this相关知识\r\n        this._onClick = this._onClick.bind(this);\r\n        this._onDoubleClick = this._onDoubleClick.bind(this);\r\n        this._onMouseDown = this._onMouseDown.bind(this);\r\n        this._onMouseMove = this._onMouseMove.bind(this);\r\n        this._onMouseUp = this._onMouseUp.bind(this);\r\n        this._onWheel = this._onWheel.bind(this);\r\n        //添加canvas listener\r\n        this._canvas.addEventListener(\"click\", this._onClick);\r\n        this._canvas.addEventListener(\"dblclick\", this._onDoubleClick);\r\n        this._canvas.addEventListener(\"mousedown\", this._onMouseDown);\r\n        this._canvas.addEventListener(\"mousemove\", this._onMouseMove);\r\n        this._canvas.addEventListener(\"mouseup\", this._onMouseUp);\r\n        this._canvas.addEventListener(\"wheel\", this._onWheel);\r\n        //animator\r\n        this._animator = new Animator(this);\r\n        //初始化\r\n        this._projection = new WebMercator();\r\n        this.setView([0, 0], 10);\r\n        //响应窗体resize\r\n        //非常重要，resize后响应，完成重绘\r\n        this._onResize = this._onResize.bind(this);\r\n        window.addEventListener(\"resize\", this._onResize);\r\n    }\r\n    /**\r\n     * DIV容器\r\n     */\r\n    get container() {\r\n        return this._container;\r\n    }\r\n    /**\r\n     * 视图中心\r\n     */\r\n    get center() {\r\n        return this._center;\r\n    }\r\n    /**\r\n     * 可视范围\r\n     */\r\n    get extent() {\r\n        return this._extent;\r\n    }\r\n    /**\r\n     * 缩放级别\r\n     */\r\n    get zoom() {\r\n        return this._zoom;\r\n    }\r\n    /**\r\n     * 坐标投影变换\r\n     * @type {Projection}\r\n     * @readonly\r\n     */\r\n    get projection() {\r\n        return this._projection;\r\n    }\r\n    /**\r\n     * 设置坐标投影变换\r\n     * @param {Projection} projection - 坐标投影变换\r\n     */\r\n    setProjection(projection) {\r\n        this._projection = projection;\r\n        //const bound: Bound = this._projection.bound;\r\n        //this._ctx.setTransform(256 * Math.pow(2, this._zoom) / (bound.xmax - bound.xmin) * bound.xscale , 0, 0, 256 * Math.pow(2, this._zoom) / (bound.ymax - bound.ymin) * bound.yscale, this._canvas.width / 2, this._canvas.height / 2);\r\n        //center为经纬度，转化为平面坐标\r\n        const origin = this._projection.project(this._center);\r\n        const bound = this._projection.bound;\r\n        //已知：地理坐标origin，转换后屏幕坐标 即canvas的中心 [this._canvas.width / 2, this._canvas.height / 2]\r\n        //求：平面坐标转换矩阵=Map初始矩阵:  地理坐标——屏幕坐标\r\n        //解法如下：\r\n        const a = 256 * Math.pow(2, this._zoom) / (bound.xmax - bound.xmin) * bound.xscale;\r\n        const d = 256 * Math.pow(2, this._zoom) / (bound.ymax - bound.ymin) * bound.yscale;\r\n        const e = this._canvas.width / 2 - a * origin[0];\r\n        const f = this._canvas.height / 2 - d * origin[1];\r\n        this._ctx.setTransform(a, 0, 0, d, e, f);\r\n    }\r\n    /**\r\n     * 设置视图级别及视图中心\r\n     * @param {number[]} center - 视图中心\r\n     * @param {number} zoom - 视图级别\r\n     */\r\n    setView(center = [0, 0], zoom = 3) {\r\n        this._center = center;\r\n        this._zoom = Math.max(3, Math.min(20, zoom));\r\n        //center为经纬度，转化为平面坐标\r\n        const origin = this._projection.project(center);\r\n        const bound = this._projection.bound;\r\n        //已知：地理坐标origin，转换后屏幕坐标 即canvas的中心 [this._canvas.width / 2, this._canvas.height / 2]\r\n        //求：平面坐标转换矩阵=Map初始矩阵:  地理坐标——屏幕坐标\r\n        //解法如下：\r\n        const a = 256 * Math.pow(2, this._zoom) / (bound.xmax - bound.xmin) * bound.xscale;\r\n        const d = 256 * Math.pow(2, this._zoom) / (bound.ymax - bound.ymin) * bound.yscale;\r\n        const e = this._canvas.width / 2 - a * origin[0];\r\n        const f = this._canvas.height / 2 - d * origin[1];\r\n        this._ctx.setTransform(a, 0, 0, d, e, f);\r\n        this.redraw();\r\n    }\r\n    /**\r\n     * 添加图层\r\n     * @param {Layer} layer - 图层\r\n     */\r\n    addLayer(layer) {\r\n        this._layers.push(layer);\r\n        layer.draw(this._ctx, this._projection, this._extent);\r\n    }\r\n    /**\r\n     * 插入图层\r\n     * @param {Layer} layer - 图层\r\n     * @param {number} index - 图层顺序\r\n     */\r\n    insertLayer(layer, index = -1) {\r\n        index = index > this._layers.length ? -1 : index;\r\n        if (index == -1) {\r\n            this.addLayer(layer);\r\n        }\r\n        else {\r\n            this._layers.splice(index, 0, layer);\r\n            this.redraw();\r\n        }\r\n    }\r\n    /**\r\n     * 移除图层\r\n     * @param {Layer} layer - 图层\r\n     */\r\n    removeLayer(layer) {\r\n        const index = this._layers.findIndex(item => item === layer);\r\n        index != -1 && this._layers.splice(index, 1);\r\n        this.redraw();\r\n    }\r\n    /**\r\n     * 清空图层\r\n     */\r\n    clearLayers() {\r\n        this._layers = [];\r\n        this.redraw();\r\n    }\r\n    /**\r\n     * 添加图形\r\n     * 参考_defaultGraphicLayer定义处的说明\r\n     * shortcut\r\n     * @param {Graphic} graphic - 图形\r\n     */\r\n    addGraphic(graphic) {\r\n        this._defaultGraphicLayer.add(graphic);\r\n        graphic.draw(this._ctx, this._projection, this._extent);\r\n    }\r\n    /**\r\n     * 添加动画\r\n     * @param {Animation} animation - 动画\r\n     */\r\n    addAnimation(animation) {\r\n        this._animator.addAnimation(animation);\r\n    }\r\n    /**\r\n     * 删除动画\r\n     * @param {Animation} animation - 动画\r\n     */\r\n    removeAnimation(animation) {\r\n        this._animator.removeAnimation(animation);\r\n    }\r\n    /**\r\n     * 清除动画\r\n     */\r\n    clearAnimations() {\r\n        this._animator.clearAnimations();\r\n    }\r\n    /**\r\n     * 更新地图视图范围以及中心点\r\n     */\r\n    updateExtent() {\r\n        const matrix = this._ctx.getTransform();\r\n        const x1 = (0 - matrix.e) / matrix.a, y1 = (0 - matrix.f) / matrix.d, x2 = (this._canvas.width - matrix.e) / matrix.a, y2 = (this._canvas.height - matrix.f) / matrix.d;\r\n        this._extent = new Bound(Math.min(x1, x2), Math.min(y1, y2), Math.max(x1, x2), Math.max(y1, y2));\r\n        this._center = this._projection.unproject([(x1 + x2) / 2, (y1 + y2) / 2]);\r\n        //this._events.extent.forEach(handler => handler({extent: this._extent, center: this._center, zoom: this._zoom, matrix: matrix}));\r\n        this.emit(\"extent\", { extent: this._extent, center: this._center, zoom: this._zoom, matrix: matrix });\r\n    }\r\n    /**\r\n     * 重绘\r\n     */\r\n    redraw() {\r\n        this._ctx.save();\r\n        this._ctx.setTransform(1, 0, 0, 1, 0, 0);\r\n        this._ctx.clearRect(0, 0, this._canvas.width, this._canvas.height);\r\n        this._ctx.restore();\r\n        this.updateExtent();\r\n        //this._geometries.forEach(geometry => geometry.draw(this._ctx));\r\n        this._defaultGraphicLayer.draw(this._ctx, this._projection, this._extent, this._zoom);\r\n        //重绘要素\r\n        this._layers.forEach(layer => {\r\n            layer.draw(this._ctx, this._projection, this._extent, this._zoom);\r\n        });\r\n        //重绘标注\r\n        //分开的原因，一般标注在上！\r\n        this._layers.filter(layer => layer instanceof FeatureLayer && layer.labeled).forEach((layer) => {\r\n            layer.drawLabel(this._ctx, this._projection, this._extent, this._zoom);\r\n        });\r\n    }\r\n    /**\r\n     * 清空视图\r\n     */\r\n    clear() {\r\n        this._ctx.setTransform(1, 0, 0, 1, 0, 0);\r\n        this._ctx.clearRect(0, 0, this._canvas.width, this._canvas.height);\r\n    }\r\n    //响应窗体resize\r\n    _onResize(event) {\r\n        this._canvas.width = this._container.clientWidth;\r\n        this._canvas.height = this._container.clientHeight;\r\n        this.emit(\"resize\", event);\r\n        this.setView(this._center, this._zoom);\r\n    }\r\n    //响应canvas被点击\r\n    _onClick(event) {\r\n        //this._handlers[\"click\"].forEach(handler => handler(event));\r\n        //探测是否有图层要素被点击\r\n        this._layers.filter(layer => layer.interactive).some(layer => layer.contain(event.offsetX, event.offsetY, this.projection, this._extent, this._zoom, \"click\"));\r\n        //地图点击响应\r\n        this.emit(\"click\", event);\r\n    }\r\n    //响应canvas被双击\r\n    //默认交互，双击放大一倍\r\n    _onDoubleClick(event) {\r\n        if (this._zoom >= 20)\r\n            return;\r\n        const scale = 2;\r\n        this._zoom += 1;\r\n        const matrix = this._ctx.getTransform();\r\n        const a1 = matrix.a, e1 = matrix.e, x1 = event.x, x2 = x1; //放大到中心点 x2 = this._canvas.width / 2\r\n        const e = (x2 - scale * (x1 - e1) - e1) / a1;\r\n        const d1 = matrix.d, f1 = matrix.f, y1 = event.y, y2 = y1; //放大到中心点 y2 = this._canvas.height / 2\r\n        const f = (y2 - scale * (y1 - f1) - f1) / d1;\r\n        this._ctx.transform(scale, 0, 0, scale, e, f);\r\n        this.redraw();\r\n        this.emit(\"dblclick\", event);\r\n    }\r\n    //响应canvas mousedown\r\n    //漫游起始\r\n    _onMouseDown(event) {\r\n        //设置为漫游状态\r\n        this._drag.flag = true;\r\n        this._drag.start.x = event.x;\r\n        this._drag.start.y = event.y;\r\n    }\r\n    _onMouseMove(event) {\r\n        //在非漫游状态下，触发mousemove事件\r\n        if (!this._drag.flag) {\r\n            //探测鼠标是否悬停到某图层要素\r\n            this._layers.filter(layer => layer.interactive).filter(layer => layer.contain(event.offsetX, event.offsetY, this.projection, this._extent, this._zoom, \"mousemove\"));\r\n            //地图鼠标移动响应\r\n            this.emit(\"mousemove\", event);\r\n        }\r\n    }\r\n    //响应canvas mouseup\r\n    //漫游结束\r\n    _onMouseUp(event) {\r\n        //在漫游状态下\r\n        if (this._drag.flag) {\r\n            //记录漫游结束坐标，并进行平移\r\n            this._drag.end.x = event.x;\r\n            this._drag.end.y = event.y;\r\n            const matrix = this._ctx.getTransform();\r\n            this._ctx.translate((this._drag.end.x - this._drag.start.x) / matrix.a, (this._drag.end.y - this._drag.start.y) / matrix.d);\r\n            this.redraw();\r\n        }\r\n        this._drag.flag = false;\r\n    }\r\n    //响应滚轮缩放\r\n    _onWheel(event) {\r\n        event.preventDefault();\r\n        const sensitivity = 5;\r\n        if (Math.abs(event.deltaY) <= sensitivity)\r\n            return;\r\n        //const sensitivity = 100;\r\n        //const delta = event.deltaY / sensitivity;\r\n        const delta = event.deltaY < 0 ? -1 : 1;\r\n        let scale = 1;\r\n        if (delta < 0) {\r\n            // 放大\r\n            scale *= delta * -2;\r\n        }\r\n        else {\r\n            // 缩小\r\n            scale /= delta * 2;\r\n        }\r\n        let zoom = Math.round(Math.log(scale));\r\n        if (zoom > 0) {\r\n            // 放大\r\n            zoom = this._zoom + zoom >= 20 ? 20 - this._zoom : zoom;\r\n        }\r\n        else if (zoom < 0) {\r\n            // 缩小\r\n            zoom = this._zoom + zoom <= 3 ? 3 - this._zoom : zoom;\r\n        }\r\n        if (zoom == 0)\r\n            return;\r\n        this._zoom += zoom;\r\n        scale = Math.pow(2, zoom);\r\n        //交互表现为 鼠标当前位置 屏幕坐标不变 进行缩放 即x2 = x1，y2=y1\r\n        //其它设定：变换前矩阵(a1,0,0,d1,e1,f1)   变换矩阵(a,0,0,d,e,f)  变换后矩阵(a2,0,0,d2,e2,f2) \r\n        //scale已通过滚轮变化，换算得到，且a=d=scale，求e和f\r\n        //1.将原屏幕坐标 x1 转成 地理坐标 x0 = (x1 - e1) / a1 \r\n        //2.地理坐标x0 转成 现屏幕坐标x2  a2 * x0 + e2 = x2 e2 = x2 - a2 * x0 代入1式 e2 = x2 - a2 * (x1 - e1) / a1\r\n        //3.已知scale = a2 / a1 故 e2 = x2 - scale * (x1 - e1)\r\n        //4.另矩阵变换 a1 * e + e1 = e2\r\n        //5.联立3和4 求得 e = (x2 - scale * (x1 - e1) - e1) / a1\r\n        const matrix = this._ctx.getTransform();\r\n        const a1 = matrix.a, e1 = matrix.e, x1 = event.x, x2 = x1; //放大到中心点 x2 = this._canvas.width / 2\r\n        const e = (x2 - scale * (x1 - e1) - e1) / a1;\r\n        const d1 = matrix.d, f1 = matrix.f, y1 = event.y, y2 = y1; //放大到中心点 y2 = this._canvas.height / 2\r\n        const f = (y2 - scale * (y1 - f1) - f1) / d1;\r\n        this._ctx.transform(scale, 0, 0, scale, e, f);\r\n        this.redraw();\r\n    }\r\n    /**\r\n     * 销毁\r\n     */\r\n    destroy() {\r\n        window.removeEventListener(\"resize\", this._onResize);\r\n        this._canvas.removeEventListener(\"click\", this._onClick);\r\n        this._canvas.removeEventListener(\"dblclick\", this._onDoubleClick);\r\n        this._canvas.removeEventListener(\"mousedown\", this._onMouseDown);\r\n        this._canvas.removeEventListener(\"mousemove\", this._onMouseMove);\r\n        this._canvas.removeEventListener(\"mouseup\", this._onMouseUp);\r\n        this._canvas.removeEventListener(\"wheel\", this._onWheel);\r\n    }\r\n}\r\n","import { Bound } from \"../util/bound\";\r\nimport { LatLngType, Projection } from \"./projection\";\r\nimport { GCJ02 } from \"./gcj02\";\r\n/**\r\n * 带百度09偏移的球体墨卡托投影\r\n * @remarks https://github.com/wandergis/coordtransform\r\n * just for china\r\n * 依赖Baidu Map API\r\n */\r\nexport class BD09 extends Projection {\r\n    /**\r\n     * 创建带国测局02偏移的球体墨卡托投影\r\n     * @remarks 参考经纬度坐标类型，不同类型走不同数据处理流程\r\n     * @param {LatLngType} type - 经纬度坐标类型\r\n     */\r\n    constructor(type = LatLngType.GPS) {\r\n        super();\r\n        this._type = type;\r\n    }\r\n    /**\r\n     * 投影后的平面坐标范围\r\n     */\r\n    get bound() {\r\n        return new Bound(-BD09.TOTAL_PIXELS / 2, BD09.TOTAL_PIXELS / 2, BD09.TOTAL_PIXELS / 2, -BD09.TOTAL_PIXELS / 2);\r\n    }\r\n    /**\r\n     * 经纬度转平面坐标\r\n     * @remarks 地理平面坐标 单位米\r\n     * @param {number} lng - 经度\r\n     * @param {number} lat - 纬度\r\n     * @return {number[]} 地理平面坐标\r\n     */\r\n    project([lng, lat]) {\r\n        //from leaflet & wiki\r\n        if (this._type == LatLngType.GPS) {\r\n            [lng, lat] = GCJ02.wgs84togcj02(lng, lat);\r\n            [lng, lat] = BD09.gcj02tobd09(lng, lat);\r\n        }\r\n        else if (this._type == LatLngType.GCJ02) {\r\n            [lng, lat] = BD09.gcj02tobd09(lng, lat);\r\n        }\r\n        const projection = new BMap.MercatorProjection();\r\n        const pixel = projection.lngLatToPoint(new BMap.Point(lng, lat));\r\n        return [pixel.x, pixel.y];\r\n        /*const d = Math.PI / 180, sin = Math.sin(lat * d);\r\n        return [WebMercator.R * lng * d,  WebMercator.R * Math.log((1 + sin) / (1 - sin)) / 2];*/\r\n    }\r\n    /**\r\n     * 平面坐标转经纬度\r\n     * @remarks 地理平面坐标 单位米\r\n     * @param {number} x - 地理平面坐标x\r\n     * @param {number} y - 地理平面坐标y\r\n     * @return {number[]} 经纬度\r\n     */\r\n    unproject([x, y]) {\r\n        const projection = new BMap.MercatorProjection();\r\n        const point = projection.pointToLngLat(new BMap.Pixel(x, y));\r\n        return [point.lng, point.lat];\r\n        /*const d = 180 / Math.PI;\r\n        return  [x * d / WebMercator.R, (2 * Math.atan(Math.exp(y / WebMercator.R)) - (Math.PI / 2)) * d];*/\r\n    }\r\n    /**\r\n     * 百度坐标系 (BD-09) 与 火星坐标系 (GCJ-02) 的转换\r\n     * @remarks\r\n     * from https://github.com/wandergis/coordtransform\r\n     * 即 百度 转 谷歌、高德\r\n     * @param bd_lng\r\n     * @param bd_lat\r\n     * @returns {number[]}\r\n     */\r\n    static bd09togcj02(bd_lng, bd_lat) {\r\n        var x = bd_lng - 0.0065;\r\n        var y = bd_lat - 0.006;\r\n        var z = Math.sqrt(x * x + y * y) - 0.00002 * Math.sin(y * Math.PI * 3000.0 / 180.0);\r\n        var theta = Math.atan2(y, x) - 0.000003 * Math.cos(x * Math.PI * 3000.0 / 180.0);\r\n        var gg_lng = z * Math.cos(theta);\r\n        var gg_lat = z * Math.sin(theta);\r\n        return [gg_lng, gg_lat];\r\n    }\r\n    ;\r\n    /**\r\n     * 火星坐标系 (GCJ-02) 与百度坐标系 (BD-09) 的转换\r\n     * @remarks\r\n     * from https://github.com/wandergis/coordtransform\r\n     * 即 谷歌、高德 转 百度\r\n     * @param lng\r\n     * @param lat\r\n     * @returns {number[]}\r\n     */\r\n    static gcj02tobd09(lng, lat) {\r\n        var z = Math.sqrt(lng * lng + lat * lat) + 0.00002 * Math.sin(lat * Math.PI * 3000.0 / 180.0);\r\n        var theta = Math.atan2(lat, lng) + 0.000003 * Math.cos(lng * Math.PI * 3000.0 / 180.0);\r\n        var bd_lng = z * Math.cos(theta) + 0.0065;\r\n        var bd_lat = z * Math.sin(theta) + 0.006;\r\n        return [bd_lng, bd_lat];\r\n    }\r\n    ;\r\n}\r\n/**\r\n * 百度平面坐标系的坐标原点与百度瓦片坐标原点相同，以瓦片等级18级为基准，规定18级时百度平面坐标的一个单位等于屏幕上的一个像素\r\n */\r\nBD09.TOTAL_PIXELS = 256 * Math.pow(2, 18);\r\n","import { Bound } from \"../util/bound\";\r\nimport { LatLngType, Projection } from \"./projection\";\r\n/**\r\n * 带国测局02偏移的球体墨卡托投影\r\n * @remarks https://github.com/wandergis/coordtransform\r\n * just for china\r\n */\r\nexport class GCJ02 extends Projection {\r\n    /**\r\n     * 创建带国测局02偏移的球体墨卡托投影\r\n     * @remarks 参考经纬度坐标类型，不同类型走不同数据处理流程\r\n     * @param {LatLngType} type - 经纬度坐标类型\r\n     */\r\n    constructor(type = LatLngType.GPS) {\r\n        super();\r\n        this._type = type;\r\n    }\r\n    /**\r\n     * 投影后的平面坐标范围\r\n     */\r\n    get bound() {\r\n        return new Bound(-Math.PI * GCJ02.R, Math.PI * GCJ02.R, Math.PI * GCJ02.R, -Math.PI * GCJ02.R);\r\n    }\r\n    /**\r\n     * 经纬度转平面坐标\r\n     * @remarks 地理平面坐标 单位米\r\n     * @param {number} lng - 经度\r\n     * @param {number} lat - 纬度\r\n     * @return {number[]} 地理平面坐标\r\n     */\r\n    project([lng, lat]) {\r\n        if (this._type == LatLngType.GPS) {\r\n            [lng, lat] = GCJ02.wgs84togcj02(lng, lat);\r\n        }\r\n        //from leaflet & wiki\r\n        const d = Math.PI / 180, sin = Math.sin(lat * d);\r\n        return [GCJ02.R * lng * d, GCJ02.R * Math.log((1 + sin) / (1 - sin)) / 2];\r\n    }\r\n    /**\r\n     * 平面坐标转经纬度\r\n     * @remarks 地理平面坐标 单位米\r\n     * @param {number} x - 地理平面坐标x\r\n     * @param {number} y - 地理平面坐标y\r\n     * @return {number[]} 经纬度\r\n     */\r\n    unproject([x, y]) {\r\n        const d = 180 / Math.PI;\r\n        return [x * d / GCJ02.R, (2 * Math.atan(Math.exp(y / GCJ02.R)) - (Math.PI / 2)) * d];\r\n    }\r\n    /**\r\n     * WGS-84 转 GCJ-02\r\n     * @remarks https://github.com/wandergis/coordtransform\r\n     * @param lng\r\n     * @param lat\r\n     * @returns {number[]}\r\n     */\r\n    static wgs84togcj02(lng, lat) {\r\n        var dlat = this._transformlat(lng - 105.0, lat - 35.0);\r\n        var dlng = this._transformlng(lng - 105.0, lat - 35.0);\r\n        var radlat = lat / 180.0 * Math.PI;\r\n        var magic = Math.sin(radlat);\r\n        magic = 1 - GCJ02.ee * magic * magic;\r\n        var sqrtmagic = Math.sqrt(magic);\r\n        dlat = (dlat * 180.0) / ((GCJ02.R * (1 - GCJ02.ee)) / (magic * sqrtmagic) * Math.PI);\r\n        dlng = (dlng * 180.0) / (GCJ02.R / sqrtmagic * Math.cos(radlat) * Math.PI);\r\n        var mglat = lat + dlat;\r\n        var mglng = lng + dlng;\r\n        return [mglng, mglat];\r\n    }\r\n    ;\r\n    /**\r\n     * GCJ-02 转换为 WGS-84\r\n     * @remarks https://github.com/wandergis/coordtransform\r\n     * @param lng\r\n     * @param lat\r\n     * @returns {number[]}\r\n     */\r\n    static gcj02towgs84(lng, lat) {\r\n        var dlat = this._transformlat(lng - 105.0, lat - 35.0);\r\n        var dlng = this._transformlng(lng - 105.0, lat - 35.0);\r\n        var radlat = lat / 180.0 * Math.PI;\r\n        var magic = Math.sin(radlat);\r\n        magic = 1 - GCJ02.ee * magic * magic;\r\n        var sqrtmagic = Math.sqrt(magic);\r\n        dlat = (dlat * 180.0) / ((GCJ02.R * (1 - GCJ02.ee)) / (magic * sqrtmagic) * Math.PI);\r\n        dlng = (dlng * 180.0) / (GCJ02.R / sqrtmagic * Math.cos(radlat) * Math.PI);\r\n        var mglat = lat + dlat;\r\n        var mglng = lng + dlng;\r\n        return [lng * 2 - mglng, lat * 2 - mglat];\r\n    }\r\n    ;\r\n    static _transformlat(lng, lat) {\r\n        var ret = -100.0 + 2.0 * lng + 3.0 * lat + 0.2 * lat * lat + 0.1 * lng * lat + 0.2 * Math.sqrt(Math.abs(lng));\r\n        ret += (20.0 * Math.sin(6.0 * lng * Math.PI) + 20.0 * Math.sin(2.0 * lng * Math.PI)) * 2.0 / 3.0;\r\n        ret += (20.0 * Math.sin(lat * Math.PI) + 40.0 * Math.sin(lat / 3.0 * Math.PI)) * 2.0 / 3.0;\r\n        ret += (160.0 * Math.sin(lat / 12.0 * Math.PI) + 320 * Math.sin(lat * Math.PI / 30.0)) * 2.0 / 3.0;\r\n        return ret;\r\n    }\r\n    ;\r\n    static _transformlng(lng, lat) {\r\n        var ret = 300.0 + lng + 2.0 * lat + 0.1 * lng * lng + 0.1 * lng * lat + 0.1 * Math.sqrt(Math.abs(lng));\r\n        ret += (20.0 * Math.sin(6.0 * lng * Math.PI) + 20.0 * Math.sin(2.0 * lng * Math.PI)) * 2.0 / 3.0;\r\n        ret += (20.0 * Math.sin(lng * Math.PI) + 40.0 * Math.sin(lng / 3.0 * Math.PI)) * 2.0 / 3.0;\r\n        ret += (150.0 * Math.sin(lng / 12.0 * Math.PI) + 300.0 * Math.sin(lng / 30.0 * Math.PI)) * 2.0 / 3.0;\r\n        return ret;\r\n    }\r\n    ;\r\n    /**\r\n     * 判断是否在国内，不在国内则不做偏移\r\n     * @remarks 此判断欠妥，暂不采用！\r\n     * @param lng\r\n     * @param lat\r\n     * @returns {boolean}\r\n     */\r\n    static out_of_china(lng, lat) {\r\n        // 纬度 3.86~53.55, 经度 73.66~135.05\r\n        return !(lng > 73.66 && lng < 135.05 && lat > 3.86 && lat < 53.55);\r\n    }\r\n    ;\r\n}\r\n/**\r\n * 地球半径\r\n */\r\nGCJ02.R = 6378137.0;\r\n/**\r\n * ee\r\n * @remarks\r\n * 不知含义的常数，用于WGS-84 与 GCJ-02 之间的转换\r\n */\r\nGCJ02.ee = 0.00669342162296594323;\r\n","/**\r\n * 经纬度坐标类型\r\n * @remarks\r\n * 本应无此一说，坐标偏移的无奈之举\r\n */\r\nexport var LatLngType;\r\n(function (LatLngType) {\r\n    /**\r\n     * GPS采集的经纬度坐标（Default）\r\n     */\r\n    LatLngType[LatLngType[\"GPS\"] = 1] = \"GPS\";\r\n    /**\r\n     * GCJ02偏移后的经纬度坐标（Default）\r\n     * Just For China, AMap aka GaoDe\r\n     */\r\n    LatLngType[LatLngType[\"GCJ02\"] = 2] = \"GCJ02\";\r\n    /**\r\n     * BD09偏移后的经纬度坐标（Default）\r\n     * Just For China, BaiduMap\r\n     */\r\n    LatLngType[LatLngType[\"BD09\"] = 3] = \"BD09\";\r\n})(LatLngType || (LatLngType = {}));\r\n/**\r\n * 坐标投影转换\r\n * @remarks\r\n * TODO: only support web mecator\r\n */\r\nexport class Projection {\r\n    /**\r\n    * 经纬度转平面坐标\r\n    * @remarks 地理平面坐标 单位米\r\n    * @param {number} lng - 经度\r\n    * @param {number} lat - 纬度\r\n    * @return {number[]} 地理平面坐标\r\n    */\r\n    project([lng, lat]) { return []; }\r\n    ;\r\n    /**\r\n     * 平面坐标转经纬度\r\n     * @remarks 地理平面坐标 单位米\r\n     * @param {number} x - 地理平面坐标x\r\n     * @param {number} y - 地理平面坐标y\r\n     * @return {number[]} 经纬度\r\n     */\r\n    unproject([x, y]) { return []; }\r\n    ;\r\n    /**\r\n     * 投影后的平面坐标范围\r\n     */\r\n    get bound() { return null; }\r\n    ;\r\n}\r\n","import { Bound } from \"../util/bound\";\r\nimport { Projection } from \"./projection\";\r\n/**\r\n * 球体墨卡托\r\n */\r\nexport class WebMercator extends Projection {\r\n    /**\r\n     * 投影后的平面坐标范围\r\n     */\r\n    get bound() {\r\n        return new Bound(-Math.PI * WebMercator.R, Math.PI * WebMercator.R, Math.PI * WebMercator.R, -Math.PI * WebMercator.R);\r\n    }\r\n    /**\r\n     * 经纬度转平面坐标\r\n     * @remarks 地理平面坐标 单位米\r\n     * @param {number} lng - 经度\r\n     * @param {number} lat - 纬度\r\n     * @return {number[]} 地理平面坐标\r\n     */\r\n    project([lng, lat]) {\r\n        //from leaflet & wiki\r\n        const d = Math.PI / 180, sin = Math.sin(lat * d);\r\n        return [WebMercator.R * lng * d, WebMercator.R * Math.log((1 + sin) / (1 - sin)) / 2];\r\n    }\r\n    /**\r\n     * 平面坐标转经纬度\r\n     * @remarks 地理平面坐标 单位米\r\n     * @param {number} x - 地理平面坐标x\r\n     * @param {number} y - 地理平面坐标y\r\n     * @return {number[]} 经纬度\r\n     */\r\n    unproject([x, y]) {\r\n        const d = 180 / Math.PI;\r\n        return [x * d / WebMercator.R, (2 * Math.atan(Math.exp(y / WebMercator.R)) - (Math.PI / 2)) * d];\r\n    }\r\n}\r\n/**\r\n * 地球半径\r\n */\r\nWebMercator.R = 6378137;\r\n","import { SimpleFillSymbol, SimpleLineSymbol, SimplePointSymbol } from \"../symbol/symbol\";\r\nimport { GeometryType } from \"../geometry/geometry\";\r\nimport { Color } from \"../util/color\";\r\n/**\r\n* 分类渲染项\r\n*/\r\nexport class CategoryRendererItem {\r\n    constructor() {\r\n        /**\r\n         * 该类总数\r\n         */\r\n        this.count = 1;\r\n    }\r\n}\r\n/**\r\n* 分类渲染\r\n* @remarks\r\n* 一般可通过设置分类字段，再调用generate自动生成分类渲染项\r\n* 也可通过手动添加和定义分类渲染项，完成分类渲染设置，通过items.push()\r\n*/\r\nexport class CategoryRenderer {\r\n    constructor() {\r\n        /**\r\n         * 所有分类集合\r\n         */\r\n        this._items = [];\r\n    }\r\n    /**\r\n     * 分类字段\r\n     * @remarks\r\n     * 一般为字符串字段，也可为枚举域值，或是非布尔值\r\n     */\r\n    get field() {\r\n        return this._field;\r\n    }\r\n    /**\r\n     * 所有分类集合\r\n     */\r\n    get items() {\r\n        return this._items;\r\n    }\r\n    /**\r\n     * 根据分类字段，自动生成分类渲染项\r\n     * @param {FeatureClass} featureClass - 要素类（要素集合）\r\n     * @param {Field} field - 分类字段\r\n     */\r\n    generate(featureClass, field) {\r\n        this._field = field;\r\n        this._items = [];\r\n        //分类统计\r\n        featureClass.features.map(feature => feature.properties[field.name]).forEach((value) => {\r\n            const item = this._items.find(item => item.value == value);\r\n            if (item) {\r\n                item.count += 1;\r\n            }\r\n            else {\r\n                const item = new CategoryRendererItem();\r\n                switch (featureClass.type) {\r\n                    case GeometryType.Point:\r\n                        const symbol1 = new SimplePointSymbol();\r\n                        symbol1.fillStyle = Color.random().toString();\r\n                        symbol1.strokeStyle = Color.random().toString();\r\n                        item.symbol = symbol1;\r\n                        item.value = value;\r\n                        this._items.push(item);\r\n                        break;\r\n                    case GeometryType.Polyline:\r\n                        const symbol2 = new SimpleLineSymbol();\r\n                        symbol2.strokeStyle = Color.random().toString();\r\n                        item.symbol = symbol2;\r\n                        item.value = value;\r\n                        this._items.push(item);\r\n                        break;\r\n                    case GeometryType.Polygon:\r\n                        const symbol3 = new SimpleFillSymbol();\r\n                        symbol3.fillStyle = Color.random().toString();\r\n                        symbol3.strokeStyle = Color.random().toString();\r\n                        item.symbol = symbol3;\r\n                        item.value = value;\r\n                        this._items.push(item);\r\n                        break;\r\n                }\r\n            }\r\n        });\r\n    }\r\n}\r\n","import { SimpleFillSymbol, SimpleLineSymbol, SimplePointSymbol } from \"../symbol/symbol\";\r\nimport { GeometryType } from \"../geometry/geometry\";\r\nimport { Color } from \"../util/color\";\r\n/**\r\n* 分级渲染项\r\n* @remarks\r\n* 分级区间一般为( ]: 即下开上闭\r\n*/\r\nexport class ClassRendererItem {\r\n}\r\n/**\r\n* 分级渲染\r\n* @remarks\r\n* 一般可通过设置分级字段，再调用generate自动生成分级渲染项\r\n* 也可通过手动添加和定义分级渲染项，完成分级渲染设置，通过items.push()\r\n*/\r\nexport class ClassRenderer {\r\n    constructor() {\r\n        /**\r\n         * 所有分级渲染项集合\r\n         */\r\n        this._items = [];\r\n    }\r\n    /**\r\n     * 分级字段\r\n     * @remarks\r\n     * 必须为数值型\r\n     */\r\n    get field() {\r\n        return this._field;\r\n    }\r\n    /**\r\n     * 所有分级渲染项集合\r\n     */\r\n    get items() {\r\n        return this._items;\r\n    }\r\n    /**\r\n     * 自动生成分级渲染项\r\n     * @remarks\r\n     * TODO: 分级有多种方式，目前只实现均分\r\n     */\r\n    generate(featureClass, field, breaks) {\r\n        this._field = field;\r\n        this._items = [];\r\n        //获取该字段极值\r\n        const stat = featureClass.features.map(feature => feature.properties[field.name]).reduce((stat, cur) => {\r\n            stat.max = Math.max(cur, stat.max);\r\n            stat.min = Math.min(cur, stat.max);\r\n            return stat;\r\n        }, { min: 0, max: 0 });\r\n        for (let i = 0; i < breaks; i++) {\r\n            const item = new ClassRendererItem();\r\n            switch (featureClass.type) {\r\n                case GeometryType.Point:\r\n                    const symbol1 = new SimplePointSymbol();\r\n                    symbol1.fillStyle = Color.random().toString();\r\n                    symbol1.strokeStyle = Color.random().toString();\r\n                    item.symbol = symbol1;\r\n                    item.low = stat.min + i * (stat.max - stat.min) / breaks;\r\n                    item.high = stat.min + (i + 1) * (stat.max - stat.min) / breaks;\r\n                    item.label = item.low + \" - \" + item.high;\r\n                    this._items.push(item);\r\n                    break;\r\n                case GeometryType.Polyline:\r\n                    const symbol2 = new SimpleLineSymbol();\r\n                    symbol2.strokeStyle = Color.random().toString();\r\n                    item.symbol = symbol2;\r\n                    item.low = stat.min + i * (stat.max - stat.min) / breaks;\r\n                    item.high = stat.min + (i + 1) * (stat.max - stat.min) / breaks;\r\n                    item.label = item.low + \" - \" + item.high;\r\n                    this._items.push(item);\r\n                    break;\r\n                case GeometryType.Polygon:\r\n                    const symbol3 = new SimpleFillSymbol();\r\n                    symbol3.fillStyle = Color.random().toString();\r\n                    symbol3.strokeStyle = Color.random().toString();\r\n                    item.symbol = symbol3;\r\n                    item.low = stat.min + i * (stat.max - stat.min) / breaks;\r\n                    item.high = stat.min + (i + 1) * (stat.max - stat.min) / breaks;\r\n                    item.label = item.low + \" - \" + item.high;\r\n                    this._items.push(item);\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n}\r\n","/**\r\n* 渲染方式基类\r\n*/\r\nexport class Renderer {\r\n}\r\n","/**\r\n* 单一渲染\r\n*/\r\nexport class SimpleRenderer {\r\n}\r\n","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nimport { Color } from \"../util/color\";\r\n/**\r\n* 符号基类\r\n* @remarks\r\n* 如按现实世界来抽取对象基类，下述属性不应放在基类\r\n* 但考虑到Canvas的上下文设定，才决定抽取到基类\r\n*/\r\nexport class Symbol {\r\n    constructor() {\r\n        /**\r\n         * 线宽\r\n         */\r\n        this.lineWidth = 1;\r\n        /**\r\n         * 描边样式\r\n         */\r\n        this.strokeStyle = \"#ff0000\";\r\n        /**\r\n         * 填充样式\r\n         */\r\n        this.fillStyle = \"#ff000088\";\r\n    }\r\n}\r\n/**\r\n* 点符号基类\r\n*/\r\nexport class PointSymbol extends Symbol {\r\n    /**\r\n     * 绘制点（虚函数）\r\n     * @param {CanvasRenderingContext2D} ctx - 绘图上下文\r\n     * @param {number} screenX - 屏幕坐标X\r\n     * @param {number} screenY - 屏幕坐标Y\r\n     */\r\n    draw(ctx, screenX, screenY) { }\r\n    /**\r\n     * 判断鼠标交互位置是否在符号范围内（虚函数）\r\n     * @param {number} anchorX - 鼠标交互位置X\r\n     * @param {number} anchorY - 鼠标交互位置Y\r\n     * @param {number} screenX - 点所在屏幕坐标X\r\n     * @param {number} screenY - 点所在屏幕坐标Y\r\n     */\r\n    contain(anchorX, anchorY, screenX, screenY) { return false; }\r\n}\r\n/**\r\n* 线符号基类\r\n*/\r\nexport class LineSymbol extends Symbol {\r\n    /**\r\n     * 绘制线（虚函数）\r\n     * @param {CanvasRenderingContext2D} ctx - 绘图上下文\r\n     * @param {number[][]} screen - 线对应坐标点的屏幕坐标集合\r\n     */\r\n    draw(ctx, screen) { }\r\n}\r\n/**\r\n* 面符号基类\r\n* @remarks\r\n* aka 填充符号\r\n*/\r\nexport class FillSymbol extends Symbol {\r\n    /**\r\n    * 绘制面（虚函数）\r\n    * @param {CanvasRenderingContext2D} ctx - 绘图上下文\r\n    * @param {number[][][]} screen - 面对应坐标点的屏幕坐标集合\r\n    */\r\n    draw(ctx, screen) { }\r\n}\r\n/**\r\n* 简单圆点符号\r\n* @remarks\r\n* 最常用的点符号\r\n*/\r\nexport class SimplePointSymbol extends PointSymbol {\r\n    constructor() {\r\n        super(...arguments);\r\n        /**\r\n        * 圆点半径，像素值\r\n        */\r\n        this.radius = 6;\r\n    }\r\n    /**\r\n     * 绘制点\r\n     * @param {CanvasRenderingContext2D} ctx - 绘图上下文\r\n     * @param {number} screenX - 屏幕坐标X\r\n     * @param {number} screenY - 屏幕坐标Y\r\n     */\r\n    draw(ctx, screenX, screenY) {\r\n        ctx.save();\r\n        ctx.strokeStyle = this.strokeStyle;\r\n        ctx.fillStyle = this.fillStyle;\r\n        ctx.lineWidth = this.lineWidth;\r\n        ctx.beginPath(); //Start path\r\n        //keep size\r\n        //地理坐标 转回 屏幕坐标\r\n        ctx.setTransform(1, 0, 0, 1, 0, 0);\r\n        ctx.arc(screenX, screenY, this.radius, 0, Math.PI * 2, true);\r\n        ctx.fill();\r\n        ctx.stroke();\r\n        ctx.restore();\r\n    }\r\n    /**\r\n     * 判断鼠标交互位置是否在符号范围内\r\n     * @param {number} anchorX - 鼠标交互位置X\r\n     * @param {number} anchorY - 鼠标交互位置Y\r\n     * @param {number} screenX - 点所在屏幕坐标X\r\n     * @param {number} screenY - 点所在屏幕坐标Y\r\n     */\r\n    contain(anchorX, anchorY, screenX, screenY) {\r\n        return Math.sqrt((anchorX - screenX) * (anchorX - screenX) + (anchorY - screenY) * (anchorY - screenY)) <= this.radius;\r\n    }\r\n}\r\n/**\r\n* 简单线符号\r\n* @remarks\r\n* 最常用的线符号\r\n*/\r\nexport class SimpleLineSymbol extends LineSymbol {\r\n    /**\r\n     * 绘制线\r\n     * @param {CanvasRenderingContext2D} ctx - 绘图上下文\r\n     * @param {number[][]} screen - 线对应坐标点的屏幕坐标集合\r\n     */\r\n    draw(ctx, screen) {\r\n        ctx.save();\r\n        ctx.strokeStyle = this.strokeStyle;\r\n        ctx.lineWidth = this.lineWidth;\r\n        //keep lineWidth\r\n        ctx.setTransform(1, 0, 0, 1, 0, 0);\r\n        ctx.beginPath();\r\n        screen.forEach((point, index) => {\r\n            const screenX = point[0], screenY = point[1];\r\n            if (index === 0) {\r\n                ctx.moveTo(screenX, screenY);\r\n            }\r\n            else {\r\n                ctx.lineTo(screenX, screenY);\r\n            }\r\n        });\r\n        ctx.stroke();\r\n        ctx.restore();\r\n    }\r\n}\r\n/**\r\n* 简单面符号\r\n* @remarks\r\n* 最常用的面填充符号\r\n*/\r\nexport class SimpleFillSymbol extends Symbol {\r\n    constructor() {\r\n        super(...arguments);\r\n        /**\r\n        * 重写线宽默认值，基类为1，按需设置，可省略\r\n        */\r\n        this.lineWidth = 2;\r\n    }\r\n    /**\r\n    * 绘制面\r\n    * @remarks\r\n    * 奇偶填充\r\n    * https://developer.mozilla.org/zh-CN/docs/Web/API/CanvasRenderingContext2D/fill\r\n    * @param {CanvasRenderingContext2D} ctx - 绘图上下文\r\n    * @param {number[][][]} screen - 面对应坐标点的屏幕坐标集合\r\n    */\r\n    draw(ctx, screen) {\r\n        ctx.save();\r\n        ctx.strokeStyle = this.strokeStyle;\r\n        ctx.fillStyle = this.fillStyle;\r\n        ctx.lineWidth = this.lineWidth;\r\n        //keep lineWidth\r\n        ctx.setTransform(1, 0, 0, 1, 0, 0);\r\n        //TODO:  exceeding the maximum extent(bound), best way is overlap by extent. find out: maximum is [-PI*R, PI*R]??\r\n        ctx.beginPath();\r\n        screen.forEach(ring => {\r\n            ring.forEach((point, index) => {\r\n                const screenX = point[0], screenY = point[1];\r\n                if (index === 0) {\r\n                    ctx.moveTo(screenX, screenY);\r\n                }\r\n                else {\r\n                    ctx.lineTo(screenX, screenY);\r\n                }\r\n            });\r\n        });\r\n        ctx.closePath();\r\n        //奇偶填充\r\n        //https://developer.mozilla.org/zh-CN/docs/Web/API/CanvasRenderingContext2D/fill\r\n        ctx.fill(\"evenodd\");\r\n        ctx.stroke();\r\n        ctx.restore();\r\n    }\r\n}\r\n/**\r\n* 图标符号\r\n* @remarks\r\n* 常用于POI兴趣点的渲染\r\n*/\r\nexport class SimpleMarkerSymbol extends PointSymbol {\r\n    constructor() {\r\n        super(...arguments);\r\n        /**\r\n        * 宽\r\n        */\r\n        this.width = 16;\r\n        /**\r\n        * 高\r\n        */\r\n        this.height = 16;\r\n        /**\r\n        * offset，坐标点对应图标的位置\r\n        * 例如，宽16px，高16px，offsetX为-8，offsetY为-8，意味着：\r\n        * 该图标的中心点对应渲染点的坐标。\r\n        */\r\n        this.offsetX = -8;\r\n        /**\r\n        * offset，坐标点对应图标的位置\r\n        * 例如，宽16px，高16px，offsetX为-8，offsetY为-8，意味着：\r\n        * 该图标的中心点对应渲染点的坐标。\r\n        */\r\n        this.offsetY = -8;\r\n    }\r\n    /**\r\n    * 记录是否已完成异步图标加载\r\n    */\r\n    get loaded() {\r\n        return this._loaded;\r\n    }\r\n    /**\r\n    * 异步加载图标\r\n    * @return {Color} 生成随机色带\r\n    */\r\n    load() {\r\n        return new Promise((resolve, reject) => {\r\n            let img = new Image();\r\n            img.onload = () => {\r\n                createImageBitmap(img).then(icon => {\r\n                    this.icon = icon;\r\n                    this._loaded = true;\r\n                    resolve(icon);\r\n                }, err => reject(err));\r\n            };\r\n            img.onerror = reject;\r\n            img.src = this.url;\r\n        });\r\n    }\r\n    /**\r\n    * 绘制图标\r\n    * @remarks\r\n    * 注意异步加载\r\n    * @param {CanvasRenderingContext2D} ctx - 绘图上下文\r\n    * @param {number} screenX - 屏幕坐标X\r\n    * @param {number} screenY - 屏幕坐标Y\r\n    */\r\n    draw(ctx, screenX, screenY) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (!this.loaded)\r\n                yield this.load();\r\n            if (this.icon) {\r\n                ctx.save();\r\n                const matrix = ctx.getTransform();\r\n                //keep size\r\n                ctx.setTransform(1, 0, 0, 1, 0, 0);\r\n                //请对应参考offset属性的描述内容\r\n                ctx.drawImage(this.icon, screenX + this.offsetX, screenY + this.offsetY, this.width, this.height);\r\n                ctx.restore();\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * 判断鼠标交互位置是否在符号范围内\r\n     * @param {number} anchorX - 鼠标交互位置X\r\n     * @param {number} anchorY - 鼠标交互位置Y\r\n     * @param {number} screenX - 点所在屏幕坐标X\r\n     * @param {number} screenY - 点所在屏幕坐标Y\r\n     */\r\n    contain(anchorX, anchorY, screenX, screenY) {\r\n        return screenX >= (anchorX + this.offsetX) && screenX <= (anchorX + this.offsetX + this.width) && screenY >= (anchorY + this.offsetY) && screenY <= (anchorY + this.offsetY + this.height);\r\n    }\r\n}\r\n/**\r\n* 文本符号\r\n* @remarks\r\n* 常用于文本标注\r\n*/\r\nexport class SimpleTextSymbol extends Symbol {\r\n    constructor() {\r\n        super(...arguments);\r\n        /**\r\n        * 边框宽\r\n        */\r\n        this.lineWidth = 3;\r\n        /**\r\n        * 边框色\r\n        */\r\n        this.strokeStyle = \"#ff0000\"; //#ffffff\r\n        /**\r\n        * 填充色\r\n        */\r\n        this.fillStyle = \"#ffffff\"; //#ffffff\r\n        /**\r\n        * X偏移\r\n        */\r\n        this.offsetX = 0;\r\n        /**\r\n        * Y偏移\r\n        */\r\n        this.offsetY = 1;\r\n        /**\r\n        * 周边留白\r\n        */\r\n        this.padding = 5;\r\n        /**\r\n        * 字体颜色\r\n        */\r\n        this.fontColor = \"#ff0000\";\r\n        /**\r\n        * 字体大小\r\n        */\r\n        this.fontSize = 12;\r\n        /**\r\n        * 字体\r\n        */\r\n        this.fontFamily = \"YaHei\";\r\n        /**\r\n        * 字体粗细\r\n        */\r\n        this.fontWeight = \"Bold\";\r\n    }\r\n}\r\n/**\r\n* 聚合符号\r\n* @remarks\r\n* 限制用于点图层\r\n*/\r\nexport class ClusterSymbol extends PointSymbol {\r\n    /**\r\n    * 创建聚合符号\r\n    * @param {number} count - 聚合数量\r\n    */\r\n    constructor(count) {\r\n        super();\r\n        /**\r\n        * 聚合数量\r\n        */\r\n        this._count = 2;\r\n        /**\r\n        * 聚合符号的默认半径\r\n        */\r\n        this.radius = 10;\r\n        /**\r\n        * 重写描边样式\r\n        */\r\n        this.strokeStyle = \"#ffffff\"; //#ff0000\r\n        /**\r\n        * 聚合外圈填充样式\r\n        */\r\n        this.outerFillStyle = \"#ffffff\"; //#ff0000\r\n        /**\r\n        * 聚合数量字体颜色\r\n        */\r\n        this.fontColor = \"#ffffff\";\r\n        /**\r\n        * 聚合数量字体\r\n        */\r\n        this.fontFamily = \"YaHei\";\r\n        /**\r\n        * 聚合数量字体粗细\r\n        */\r\n        this.fontWeight = \"Bold\";\r\n        this._count = count;\r\n    }\r\n    /**\r\n    * 聚合数量文本\r\n    * @remarks\r\n    * 大于99，标记为99+\r\n    */\r\n    get text() {\r\n        return this._count <= 99 ? this._count.toString() : \"99+\";\r\n    }\r\n    /**\r\n    * 内圈半径\r\n    */\r\n    get inner() {\r\n        return this._count <= 15 ? this.radius + this._count : this.radius + 15;\r\n    }\r\n    /**\r\n    * 外圈半径\r\n    */\r\n    get outer() {\r\n        return this.inner + 4;\r\n    }\r\n    /**\r\n    * 字体随数量递增，同时控制为非无限递增\r\n    */\r\n    get fontSize() {\r\n        if (this._count < 10) {\r\n            return 12;\r\n        }\r\n        else if (this._count >= 10 && this._count < 30) {\r\n            return 14;\r\n        }\r\n        else if (this._count >= 30 && this._count < 50) {\r\n            return 16;\r\n        }\r\n        else if (this._count >= 30 && this._count < 50) {\r\n            return 18;\r\n        }\r\n        else if (this._count > 50) {\r\n            return 20;\r\n        }\r\n    }\r\n    /**\r\n   * 聚合的内圈填充样式\r\n   * @remarks\r\n   * 采用色带，色带可自定义扩展\r\n   */\r\n    get innerFillStyle() {\r\n        //const colors = Color.ramp(new Color(0, 255, 0), new Color(255,0,0), 16);\r\n        //const colors = Color.ramp(new Color(22,198,227), new Color(255, 0, 255), 16);\r\n        const colors = Color.ramp(new Color(25, 202, 173), new Color(244, 96, 108), 16);\r\n        return colors[this._count <= 15 ? this._count : 15].toString();\r\n    }\r\n    /**\r\n    * 绘制聚合符号\r\n    * @param {CanvasRenderingContext2D} ctx - 绘图上下文\r\n    * @param {number} screenX - 屏幕坐标X\r\n    * @param {number} screenY - 屏幕坐标Y\r\n    */\r\n    draw(ctx, screenX, screenY) {\r\n        ctx.save();\r\n        ctx.setTransform(1, 0, 0, 1, 0, 0);\r\n        ctx.strokeStyle = this.strokeStyle;\r\n        ctx.fillStyle = this.outerFillStyle;\r\n        ctx.lineWidth = this.lineWidth;\r\n        ctx.beginPath(); //Start path\r\n        //keep size 画外圈\r\n        ctx.arc(screenX, screenY, this.outer, 0, Math.PI * 2, true);\r\n        ctx.fill();\r\n        ctx.stroke();\r\n        ctx.fillStyle = this.innerFillStyle;\r\n        ctx.beginPath(); //Start path\r\n        //keep size 画内圈\r\n        ctx.arc(screenX, screenY, this.inner, 0, Math.PI * 2, true);\r\n        ctx.fill();\r\n        ctx.stroke();\r\n        ctx.textBaseline = \"middle\";\r\n        ctx.textAlign = \"center\";\r\n        ctx.fillStyle = this.fontColor;\r\n        ctx.font = this.fontSize + \"px/1 \" + this.fontFamily + \" \" + this.fontWeight;\r\n        ctx.fillText(this.text, screenX, screenY);\r\n        ctx.restore();\r\n    }\r\n}\r\n/**\r\n* 字符符号\r\n* @remarks\r\n* 中英文皆可，注意控制长度，推荐单个字符\r\n*/\r\nexport class LetterSymbol extends PointSymbol {\r\n    constructor() {\r\n        super(...arguments);\r\n        /**\r\n        * 外圈半径\r\n        */\r\n        this.radius = 10;\r\n        /**\r\n        * 字符，中英文皆可，推荐单个字符\r\n        */\r\n        this.letter = \"\";\r\n        /**\r\n        * 字体颜色\r\n        */\r\n        this.fontColor = \"#ff0000\";\r\n        /**\r\n        * 字体大小\r\n        */\r\n        this.fontSize = 12;\r\n        /**\r\n        * 字体\r\n        */\r\n        this.fontFamily = \"YaHei\";\r\n        /**\r\n        * 字体粗细\r\n        */\r\n        this.fontWeight = \"Bold\";\r\n    }\r\n    /**\r\n     * 绘制字符符号\r\n     * @param {CanvasRenderingContext2D} ctx - 绘图上下文\r\n     * @param {number} screenX - 屏幕坐标X\r\n     * @param {number} screenY - 屏幕坐标Y\r\n     */\r\n    draw(ctx, screenX, screenY) {\r\n        ctx.save();\r\n        ctx.strokeStyle = this.strokeStyle;\r\n        ctx.fillStyle = this.fillStyle;\r\n        ctx.lineWidth = this.lineWidth;\r\n        ctx.beginPath(); //Start path\r\n        //keep size\r\n        ctx.setTransform(1, 0, 0, 1, 0, 0);\r\n        //绘制外圈\r\n        ctx.arc(screenX, screenY, this.radius, 0, Math.PI * 2, true);\r\n        ctx.fill();\r\n        ctx.stroke();\r\n        ctx.textBaseline = \"middle\";\r\n        ctx.textAlign = \"center\";\r\n        ctx.fillStyle = this.fontColor;\r\n        ctx.font = this.fontSize + \"px/1 \" + this.fontFamily + \" \" + this.fontWeight;\r\n        //绘制字符\r\n        ctx.fillText(this.letter, screenX, screenY);\r\n        ctx.restore();\r\n    }\r\n    /**\r\n     * 判断鼠标交互位置是否在符号范围内\r\n     * @param {number} anchorX - 鼠标交互位置X\r\n     * @param {number} anchorY - 鼠标交互位置Y\r\n     * @param {number} screenX - 点所在屏幕坐标X\r\n     * @param {number} screenY - 点所在屏幕坐标Y\r\n     */\r\n    contain(anchorX, anchorY, screenX, screenY) {\r\n        return Math.sqrt((anchorX - screenX) * (anchorX - screenX) + (anchorY - screenY) * (anchorY - screenY)) <= this.radius;\r\n    }\r\n}\r\n/**\r\n* 箭头符号\r\n*/\r\nexport class ArrowSymbol extends Symbol {\r\n    constructor() {\r\n        super(...arguments);\r\n        /**\r\n        * 线宽\r\n        */\r\n        this.lineWidth = 2;\r\n        /**\r\n         * 决定绘制箭头的最小线长\r\n         * @remarks 屏幕坐标，单位pixel\r\n         * 默认 >50pixels will draw arrow\r\n         */\r\n        this.minLength = 50;\r\n        /**\r\n         * 箭翼长度\r\n         */\r\n        this.arrowLength = 10;\r\n        /**\r\n         * 箭翼夹角\r\n         * @remarks 默认 angle 30 = Math.PI / 6\r\n         */\r\n        this.arrowAngle = Math.PI / 6;\r\n    }\r\n    /**\r\n     * 绘制线\r\n     * @param {CanvasRenderingContext2D} ctx - 绘图上下文\r\n     * @param {number[][]} screen - 线对应坐标点的屏幕坐标集合\r\n     */\r\n    draw(ctx, screen) {\r\n        ctx.save();\r\n        ctx.strokeStyle = this.strokeStyle;\r\n        ctx.lineWidth = this.lineWidth;\r\n        //keep lineWidth\r\n        ctx.setTransform(1, 0, 0, 1, 0, 0);\r\n        ctx.beginPath();\r\n        screen.forEach((point, index) => {\r\n            const screenX = point[0], screenY = point[1];\r\n            if (index === 0) {\r\n                ctx.moveTo(screenX, screenY);\r\n            }\r\n            else {\r\n                ctx.lineTo(screenX, screenY);\r\n            }\r\n        });\r\n        ctx.stroke();\r\n        //已知 起点和终点  求沿线距起点定长的点\r\n        const _getPointAlongLine = (p1, p2, d) => {\r\n            //line length\r\n            let l = Math.sqrt((p2[0] - p1[0]) * (p2[0] - p1[0]) + (p2[1] - p1[1]) * (p2[1] - p1[1]));\r\n            let t = d / l;\r\n            return [(1 - t) * p1[0] + t * p2[0], (1 - t) * p1[1] + t * p2[1]];\r\n        };\r\n        //已知 起点 y = kx + b   求沿线距起点定长的点 两个点\r\n        const _getPointAlongLine2 = (k, b, p, d) => {\r\n            let x0 = p[0] + Math.sqrt((d * d) / (k * k + 1)), x1 = p[0] - Math.sqrt((d * d) / (k * k + 1));\r\n            return [[x0, k * x0 + b], [x1, k * x1 + b]];\r\n        };\r\n        screen.reduce((prev, cur) => {\r\n            if (prev) {\r\n                const length = Math.sqrt((cur[0] - prev[0]) * (cur[0] - prev[0]) + (cur[1] - prev[1]) * (cur[1] - prev[1]));\r\n                if (length >= this.minLength) {\r\n                    //中点 即箭头\r\n                    const [middleX, middleY] = [(prev[0] + cur[0]) / 2, (prev[1] + cur[1]) / 2];\r\n                    //箭尾垂线的垂足\r\n                    const [footX, footY] = _getPointAlongLine([middleX, middleY], prev, Math.cos(this.arrowAngle) * this.arrowLength);\r\n                    const k = (cur[1] - prev[1]) / (cur[0] - prev[0]);\r\n                    // 1/k 垂线\r\n                    const points = _getPointAlongLine2(-1 / k, footY - footX * -1 / k, [footX, footY], Math.sin(this.arrowAngle) * this.arrowLength);\r\n                    //两点\r\n                    points.forEach(point => {\r\n                        ctx.beginPath();\r\n                        ctx.moveTo(middleX, middleY);\r\n                        ctx.lineTo(point[0], point[1]);\r\n                        ctx.stroke();\r\n                    });\r\n                }\r\n                return cur;\r\n            }\r\n            else {\r\n                return cur;\r\n            }\r\n        });\r\n        ctx.restore();\r\n    }\r\n}\r\n","/**\r\n * 边界类，用在包络矩形，以及投影的平面坐标边界\r\n * @remarks\r\n * 考虑此处代码影响较多内容，故暂不大变动，沿用设计时的定义：\r\n * 屏幕坐标系的设定：x正方向为自左向右，y正方向为自上向下，因此与常规笛卡尔坐标系中的y正方向相反，请重点注意\r\n * 故，如传入常规笛卡尔坐标系的坐标，请将ymin与ymax颠倒(即y坐标的最大值传给ymin，最小值传给ymax)，以便于程序设置yscale为-1\r\n * 当然，如表示的是屏幕坐标范围与边界，正常传入：ymin最小值，ymax最大值。\r\n */\r\nexport class Bound {\r\n    /**\r\n     * 创建包络矩形\r\n     * @param {number} xmin - x方向靠左极值\r\n     * @param {number} ymin - y方向上方极值\r\n     * @param {number} xmax - x方向靠右极值\r\n     * @param {number} ymax - y方向下方极值\r\n     */\r\n    constructor(xmin, ymin, xmax, ymax) {\r\n        //+1代表 x方向为自左向右，-1则反之\r\n        this._xscale = 1;\r\n        //+1代表 y方向为自上向下，-1则反之\r\n        this._yscale = 1;\r\n        this._xmin = Math.min(xmin, xmax);\r\n        this._ymin = Math.min(ymin, ymax);\r\n        this._xmax = Math.max(xmin, xmax);\r\n        this._ymax = Math.max(ymin, ymax);\r\n        this._xscale = xmin <= xmax ? 1 : -1;\r\n        this._yscale = ymin <= ymax ? 1 : -1;\r\n    }\r\n    /**\r\n     * x方向最小值（应为靠左极值）\r\n     * @return {number} x方向靠左极值\r\n     */\r\n    get xmin() {\r\n        return this._xmin;\r\n    }\r\n    /**\r\n     * y方向最小值（应为上方极值）\r\n     * @return {number} y方向上方极值\r\n     */\r\n    get ymin() {\r\n        return this._ymin;\r\n    }\r\n    /**\r\n     * x方向最大值（应为靠右极值）\r\n     * @return {number} x方向靠右极值\r\n     */\r\n    get xmax() {\r\n        return this._xmax;\r\n    }\r\n    /**\r\n    * y方向最大值（应为下方极值）\r\n    * @return {number} y方向下方极值\r\n    */\r\n    get ymax() {\r\n        return this._ymax;\r\n    }\r\n    /**\r\n     * +1代表 x方向为自左向右，-1则反之\r\n     * @return {number} x方向\r\n     */\r\n    get xscale() {\r\n        return this._xscale;\r\n    }\r\n    /**\r\n     * +1代表 y方向为自上向下，-1则反之\r\n     * @return {number} y方向\r\n     */\r\n    get yscale() {\r\n        return this._yscale;\r\n    }\r\n    /**\r\n     * 包络矩形中心点坐标数组\r\n     * @return {number[]} 中心点坐标数组[x,y]\r\n     */\r\n    getCenter() {\r\n        return [(this._xmin + this._xmax) / 2, (this._ymin + this._ymax) / 2];\r\n    }\r\n    /**\r\n     * 是否交叉叠盖\r\n     * @param {Bound} bound - 交叉叠盖检测对象\r\n     * @return {boolean} 是否交叉叠盖\r\n     */\r\n    intersect(bound) {\r\n        return (bound.xmax >= this._xmin) && (bound.xmin <= this._xmax) && (bound.ymax >= this._ymin) && (bound.ymin <= this._ymax);\r\n    }\r\n    /**\r\n     * 缩放整个边界\r\n     * @param {number} s - 缩放倍数\r\n     */\r\n    scale(s) {\r\n        this._xmin = this._xmin - (s - 1) * (this._xmax - this._xmin) / 2;\r\n        this._xmax = this._xmax + (s - 1) * (this._xmax - this._xmin) / 2;\r\n        this._ymin = this._ymin - (s - 1) * (this._ymax - this._ymin) / 2;\r\n        this._ymax = this._ymax + (s - 1) * (this._ymax - this._ymin) / 2;\r\n    }\r\n    /**\r\n     * 缓冲整个边界，类似拓宽\r\n     * @param {number} size - 拓宽相应尺寸\r\n     */\r\n    buffer(size) {\r\n        this._xmin -= size;\r\n        this._ymin -= size;\r\n        this._xmax += size;\r\n        this._ymax += size;\r\n    }\r\n}\r\n","/**\r\n * 颜色工具类\r\n * @remarks\r\n * 此处有太多可扩展内容，如更优雅的生成色带，给色带更多的配置项等等\r\n * 但由于相关内容，并非GIS API的关注重点，故未花太多精力扩展此内容\r\n * 各位可根据项目需求，自行发挥，达到更优雅美观的颜色渲染效果。\r\n * TODO: a lot of things to be done\r\n */\r\nexport class Color {\r\n    /**\r\n     * 创建颜色\r\n     * @param {number} r - red\r\n     * @param {number} g - green\r\n     * @param {number} b - blue\r\n     * @param {number} a - alpha\r\n     */\r\n    constructor(r, g, b, a = 1) {\r\n        /**\r\n         * alpha\r\n         */\r\n        this.a = 1;\r\n        this.r = r;\r\n        this.g = g;\r\n        this.b = b;\r\n        this.a = a;\r\n    }\r\n    /**\r\n    * 输出rgba值\r\n    * @return {string} rgba\r\n    */\r\n    toString() {\r\n        return \"rgba(\" + this.r + \",\" + this.g + \",\" + this.b + \",\" + this.a + \")\";\r\n    }\r\n    /**\r\n     * 16进制表示法颜色 转十进制 R G B\r\n     * @param {string} hex - 十六进制 #ffffff\r\n     * @return {string} 十进制 R G B\r\n     */\r\n    static fromHex(hex) {\r\n        let reg = /^#([0-9a-fA-f]{3}|[0-9a-fA-f]{6}|[0-9a-fA-f]{8})$/;\r\n        hex = hex.toLowerCase();\r\n        if (hex && reg.test(hex)) {\r\n            //处理三位的颜色值\r\n            if (hex.length === 4) {\r\n                var sColorNew = \"#\";\r\n                for (var i = 1; i < 4; i += 1) {\r\n                    sColorNew += hex.slice(i, i + 1).concat(hex.slice(i, i + 1));\r\n                }\r\n                hex = sColorNew;\r\n            }\r\n            //处理六位的颜色值\r\n            if (hex.length === 4) {\r\n                hex += \"ff\";\r\n            }\r\n            let sColorChange = [];\r\n            for (let i = 1; i < 9; i += 2) {\r\n                sColorChange.push(parseInt(\"0x\" + hex.slice(i, i + 2)));\r\n            }\r\n            return new Color(sColorChange[0], sColorChange[1], sColorChange[2], sColorChange[3] / 255);\r\n        }\r\n    }\r\n    /**\r\n     * 生成随机色带\r\n     * @param {Color} start - 色带起始色\r\n     * @param {Color} end - 色带终止色\r\n     * @param {number} count - 随机颜色数，默认值10个\r\n     * @return {Color} 生成随机色带\r\n     */\r\n    static ramp(start, end, count = 10) {\r\n        const colors = [];\r\n        for (let i = 0; i < count; i += 1) {\r\n            colors.push(new Color((end.r - start.r) * i / count + start.r, (end.g - start.g) * i / count + start.g, (end.b - start.b) * i / count + start.b, (end.a - start.a) * i / count + start.a));\r\n        }\r\n        return colors;\r\n    }\r\n    /**\r\n     * 生成随机色\r\n     * @return {Color} 生成随机色\r\n     */\r\n    static random() {\r\n        return new Color(Math.random() * 255, Math.random() * 255, Math.random() * 255);\r\n    }\r\n}\r\n","/**\r\n * 可订阅对象\r\n * @remarks\r\n * 事件监听者列表\r\n * {\r\n *    click: [clickhander1, clickhandler2, ...]\r\n *    mousemove: [mousemovehander1, mousemovehandler2, ...]\r\n * }\r\n */\r\nexport class Subject {\r\n    /**\r\n     * 事件名称数组\r\n     * [\"click\", \"mousemove\"]\r\n     * @param {string[]} events - 事件名称数组\r\n     */\r\n    constructor(events) {\r\n        this._handlers = {};\r\n        events.forEach(event => {\r\n            this._handlers[event] = []; //handlers array\r\n        });\r\n    }\r\n    /**\r\n     * 事件注册监听\r\n     * @param {string} event - 事件名称\r\n     * @param {Function} handler - 回调函数\r\n     */\r\n    on(event, handler) {\r\n        this._handlers[event].push(handler);\r\n    }\r\n    /**\r\n     * 事件取消监听\r\n     * @param {string} event - 事件名称\r\n     * @param {Function} handler - 回调函数\r\n     */\r\n    off(event, handler) {\r\n        if (Array.isArray(this._handlers[event])) {\r\n            const index = this._handlers[event].findIndex(item => item === handler);\r\n            index != -1 && this._handlers[event].splice(index, 1);\r\n        }\r\n    }\r\n    /**\r\n     * 激发事件\r\n     * @param {string} event - 事件名称\r\n     * @param {Object} param - 事件参数\r\n     */\r\n    emit(event, param) {\r\n        this._handlers[event].forEach(handler => handler(param));\r\n    }\r\n}\r\n","import {\r\n    Map,\r\n    Point,\r\n    Polyline,\r\n    SimpleFillSymbol,\r\n    FeatureClass,\r\n    FeatureLayer,\r\n    SimpleRenderer,\r\n    CategoryRenderer,\r\n    CategoryRendererItem,\r\n    Field,\r\n    FieldType,\r\n    Label, NullCollision, SimpleCollision, CoverCollision, SimpleTextSymbol,\r\n    Graphic, SimpleMarkerSymbol, Feature, LatLngType, GCJ02, SimplePointSymbol,\r\n    PointAnimation, ParticleAnimation, LineAnimation\r\n} from \"../dist\";\r\n\r\nwindow.load = () => {\r\n    const amap = new AMap.Map(\"amap\", {\r\n        fadeOnZoom: false,\r\n        navigationMode: 'classic',\r\n        optimizePanAnimation: false,\r\n        animateEnable: false,\r\n        dragEnable: false,\r\n        zoomEnable: false,\r\n        resizeEnable: true,\r\n        doubleClickZoom: false,\r\n        keyboardEnable: false,\r\n        scrollWheel: false,\r\n        expandZoomRange: true,\r\n        zooms: [1, 20],\r\n        mapStyle: 'normal',\r\n        features: ['road', 'point', 'bg'],\r\n        viewMode: '2D'\r\n    });\r\n\r\n    const map = new Map(\"foo\");\r\n    map.on(\"extent\", (event) => {\r\n        amap.setZoomAndCenter(event.zoom, event.center);\r\n    });\r\n\r\n    map.setView([116.397411,39.909186], 4);\r\n\r\n    const point = new Point(116.397411,39.909186);\r\n    const animation = new ParticleAnimation(point);\r\n    animation.radius = 40;\r\n    animation.speed = 4;\r\n    animation.alpha = 0.8;\r\n    map.addAnimation(animation);\r\n\r\n    const point2 = new Point(109.519, 18.271);\r\n    const animation5 = new PointAnimation(point2);\r\n    map.addAnimation(animation5);\r\n\r\n    const point3 = new Point(119.519, 18.271);\r\n    const animation6 = new PointAnimation(point3);\r\n    animation6.color = \"#00ffff\";\r\n    map.addAnimation(animation6);\r\n\r\n    const point4 = new Point(119.519, 48.271);\r\n    const animation7 = new ParticleAnimation(point4);\r\n    animation7.radius = 20;\r\n    animation7.speed = 4;\r\n    animation7.alpha = 0.8;\r\n    animation7.color = \"#2d2d77\";\r\n    map.addAnimation(animation7);\r\n\r\n    const point5 = new Point(109.519, 48.271);\r\n    const animation8 = new ParticleAnimation(point5);\r\n    animation8.radius = 20;\r\n    animation8.speed = 8;\r\n    animation8.alpha = 0.8;\r\n    animation8.color = \"#ff00ff\";\r\n    map.addAnimation(animation8);\r\n\r\n    const polyline1 = new Polyline([[116.397411,39.909186],[109.519, 18.271]]);\r\n    const polyline2 = new Polyline([[116.397411,39.909186],[119.519, 18.271]]);\r\n    const polyline3 = new Polyline([[116.397411,39.909186],[119.519, 48.271]]);\r\n    const polyline4 = new Polyline([[116.397411,39.909186],[109.519, 48.271]]);\r\n    const animation1 = new LineAnimation(polyline1);\r\n    const animation2 = new LineAnimation(polyline2);\r\n    const animation3 = new LineAnimation(polyline3);\r\n    const animation4 = new LineAnimation(polyline4);\r\n    map.addAnimation(animation1);\r\n    map.addAnimation(animation2);\r\n    map.addAnimation(animation3);\r\n    map.addAnimation(animation4);\r\n\r\n}\r\n\r\n//cause typescript tsc forget js suffix for geometry.js"],"sourceRoot":""}