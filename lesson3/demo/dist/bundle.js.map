{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///../dist/element/graphic.js","webpack:///../dist/geometry/geometry.js","webpack:///../dist/geometry/point.js","webpack:///../dist/geometry/polygon.js","webpack:///../dist/geometry/polyline.js","webpack:///../dist/index.js","webpack:///../dist/layer/graphic-layer.js","webpack:///../dist/layer/layer.js","webpack:///../dist/map.js","webpack:///../dist/projection/projection.js","webpack:///../dist/projection/web-mercator.js","webpack:///../dist/symbol/symbol.js","webpack:///../dist/util/bound.js","webpack:///./demo-02.js"],"names":[],"mappings":";QAAA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;;QAEA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;;;QAGA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA,0CAA0C,gCAAgC;QAC1E;QACA;;QAEA;QACA;QACA;QACA,wDAAwD,kBAAkB;QAC1E;QACA,iDAAiD,cAAc;QAC/D;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA,yCAAyC,iCAAiC;QAC1E,gHAAgH,mBAAmB,EAAE;QACrI;QACA;;QAEA;QACA;QACA;QACA,2BAA2B,0BAA0B,EAAE;QACvD,iCAAiC,eAAe;QAChD;QACA;QACA;;QAEA;QACA,sDAAsD,+DAA+D;;QAErH;QACA;;;QAGA;QACA;;;;;;;;;;;;;AClFA;AAAA;AAAA;AAAyD;AAClD;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,oEAAW;AAC1C;AACA;AACA;AACA;;;;;;;;;;;;;ACdA;AAAA;AAAA;AAAA;AAAqD;AACI;AAClD;AACP;AACA;AACA;AACA,yBAAyB;AACzB;AACA,+BAA+B,oEAAW,4CAA4C,gEAAiB,KAAK;AAC5G;AACA;;;;;;;;;;;;;ACVA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAAiB,SAAI,IAAI,SAAI;AAC7B,2BAA2B,+DAA+D,gBAAgB,EAAE,EAAE;AAC9G;AACA,mCAAmC,MAAM,6BAA6B,EAAE,YAAY,WAAW,EAAE;AACjG,kCAAkC,MAAM,iCAAiC,EAAE,YAAY,WAAW,EAAE;AACpG,+BAA+B,qFAAqF;AACpH;AACA,KAAK;AACL;AACsC;AACA;AACmC;AAChB;AACzD;AACO,oBAAoB,kDAAQ;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA,0BAA0B,iDAAK;AAC/B;AACA;AACA,+BAA+B,oEAAW,4CAA4C,gEAAiB;AACvG;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,gEAAiB;AACnD;AACA;AACA;AACA,gCAAgC;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,iEAAkB;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,kBAAkB;;;;;;;;;;;;;ACtFlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAsC;AACA;AACc;AACK;AACzD;AACO,sBAAsB,kDAAQ;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT,0BAA0B,iDAAK;AAC/B;AACA,+BAA+B,oEAAW,4CAA4C,+DAAgB;AACtG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AC/FA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAsC;AACA;AACc;AACK;AACzD;AACO,uBAAuB,kDAAQ;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,0BAA0B,iDAAK;AAC/B;AACA,+BAA+B,oEAAW,4CAA4C,+DAAgB;AACtG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;;;;;;;;;;;;AClFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAsB;AACY;AACE;AACH;AACG;AACD;AACL;AACQ;AACE;AACE;AACV;AACH;;;;;;;;;;;;;ACX7B;AAAA;AAAA;AAAA;AAAgC;AACyB;AAClD,2BAA2B,4CAAK;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,oEAAW;AAC1C;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;;;;;;;;;;;;;ACjBA;AAAA;AAAA;AAAyD;AAClD;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,oEAAW,2CAA2C;AACrF;AACA;;;;;;;;;;;;;ACbA;AAAA;AAAA;AAAA;AAAA;AAAqC;AACmB;AACH;AAC9C;AACP;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,iEAAY;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yDAAyD,cAAc,aAAa;AACpF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,oEAAW;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,iDAAK;AAChC;AACA,wDAAwD,+EAA+E;AACvI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kEAAkE;AAClE;AACA,kEAAkE;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kEAAkE;AAClE;AACA,kEAAkE;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACnMA;AAAA;AAAA;AACO;AACP;AACA,yBAAyB,WAAW;AACpC;AACA;AACA,uBAAuB,WAAW;AAClC;AACA;AACA,iBAAiB,aAAa;AAC9B;AACA;;;;;;;;;;;;;ACXA;AAAA;AAAA;AAAA;AAAsC;AACI;AAC1C;AACO,0BAA0B,sDAAU;AAC3C;AACA;AACA,mBAAmB,iDAAK;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACpBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAO;AACP;AACO;AACP;AACA;AACA;AACA;AACA;AACA,qCAAqC;AACrC,qCAAqC;AACrC;AACA;AACO;AACP;AACA;AACA;AACA,qCAAqC;AACrC;AACA;AACO;AACP;AACA;AACA;AACA,qCAAqC;AACrC,qCAAqC;AACrC;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,SAAS;AACT;AACA;;;;;;;;;;;;;ACpDA;AAAA;AAAA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AC7CA;AAAA;AAAsI;;AAEtI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL,oBAAoB,yCAAG;AACvB;AACA;AACA,KAAK;;AAEL;AACA,sBAAsB,UAAU;AAChC;AACA;AACA;AACA;AACA,qBAAqB,SAAS;AAC9B;AACA;AACA;AACA;AACA,sBAAsB,UAAU;AAChC,yBAAyB,SAAS;AAClC;AACA;AACA;AACA,KAAK;;;AAGL;AACA,yBAAyB,kDAAY;AACrC,0BAA0B,sDAAgB;AAC1C;AACA,sBAAsB,UAAU;AAChC,yBAAyB,8CAAQ;AACjC,4BAA4B,6CAAO;AACnC;AACA;AACA;AACA;AACA,yBAAyB,kDAAY;AACrC,0BAA0B,sDAAgB;AAC1C;AACA,qBAAqB,SAAS;AAC9B,yBAAyB,8CAAQ;AACjC,4BAA4B,6CAAO;AACnC;AACA;AACA;AACA;AACA,2BAA2B,kDAAY;AACvC,4BAA4B,uDAAiB;AAC7C;AACA;AACA;AACA,sBAAsB,UAAU;AAChC,yBAAyB,SAAS;AAClC,8BAA8B,2CAAK;AACnC,gCAAgC,6CAAO;AACvC;AACA;AACA;AACA;;AAEA;AACA,qBAAqB;;AAErB;AACA,uBAAuB,wDAAkB;AACzC;AACA;AACA;AACA;AACA;AACA,sBAAsB,2CAAK;AAC3B,wBAAwB,6CAAO;AAC/B;;AAEA;AACA;;AAEA,uD","file":"bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./demo-02.js\");\n","import { WebMercator } from \"../projection/web-mercator\";\r\nexport class Graphic {\r\n    constructor(geometry, symbol) {\r\n        this.visible = true;\r\n        this._geometry = geometry;\r\n        this._symbol = symbol;\r\n    }\r\n    get bound() {\r\n        return this._geometry ? this._geometry.bound : null;\r\n    }\r\n    draw(ctx, projection = new WebMercator(), extent = projection.bound) {\r\n        if (this.visible)\r\n            this._geometry.draw(ctx, projection, extent, this._symbol);\r\n    }\r\n}\r\n","import { SimplePointSymbol } from \"../symbol/symbol\";\r\nimport { WebMercator } from \"../projection/web-mercator\";\r\nexport class Geometry {\r\n    get bound() {\r\n        return this._bound;\r\n    }\r\n    project(projection) { }\r\n    ;\r\n    draw(ctx, projection = new WebMercator(), extent = projection.bound, symbol = new SimplePointSymbol()) { }\r\n    ;\r\n}\r\n","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nimport { Geometry } from \"./geometry\";\r\nimport { Bound } from \"../util/bound\";\r\nimport { SimpleMarkerSymbol, SimplePointSymbol } from \"../symbol/symbol\";\r\nimport { WebMercator } from \"../projection/web-mercator\";\r\n//点\r\nexport class Point extends Geometry {\r\n    constructor(lng, lat) {\r\n        super();\r\n        this._lng = lng;\r\n        this._lat = lat;\r\n    }\r\n    ;\r\n    //need interface to separate dependence\r\n    /* addTo(map) {\r\n        this._projection = map.projection;\r\n        [this._x, this._y] = this._projection.project([this._lng, this._lat]);\r\n        //TODO: bound tolerance\r\n        this._bound = new Bound(this._x, this._y, this._x, this._y);\r\n        map.addGeometry(this);\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D) {\r\n        ctx.save();\r\n        ctx.strokeStyle = \"#ff0000\";\r\n        ctx.fillStyle = \"#ff0000\";\r\n        ctx.beginPath(); //Start path\r\n        const matrix = (ctx as any).getTransform();\r\n        //keep radius size\r\n        ctx.setTransform(1,0,0,1,0,0);\r\n        ctx.arc((matrix.a * this._x + matrix.e), (matrix.d * this._y + matrix.f), Point.RADIUS, 0, Math.PI * 2, true);\r\n\r\n        ctx.fill();\r\n        ctx.stroke();\r\n        ctx.restore();\r\n    }; */\r\n    project(projection) {\r\n        this._projection = projection;\r\n        [this._x, this._y] = this._projection.project([this._lng, this._lat]);\r\n        //TODO: bound tolerance\r\n        this._bound = new Bound(this._x, this._y, this._x, this._y);\r\n        this._projected = true;\r\n    }\r\n    draw(ctx, projection = new WebMercator(), extent = projection.bound, symbol = new SimplePointSymbol()) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (!this._projected)\r\n                this.project(projection);\r\n            if (!extent.intersect(this._bound))\r\n                return;\r\n            ctx.save();\r\n            if (symbol instanceof SimplePointSymbol) {\r\n                ctx.strokeStyle = symbol.strokeStyle;\r\n                ctx.fillStyle = symbol.fillStyle;\r\n                ctx.lineWidth = symbol.lineWidth;\r\n                ctx.beginPath(); //Start path\r\n                const matrix = ctx.getTransform();\r\n                //keep size\r\n                ctx.setTransform(1, 0, 0, 1, 0, 0);\r\n                ctx.arc((matrix.a * this._x + matrix.e), (matrix.d * this._y + matrix.f), symbol.radius, 0, Math.PI * 2, true);\r\n                ctx.fill();\r\n                ctx.stroke();\r\n            }\r\n            else if (symbol instanceof SimpleMarkerSymbol) {\r\n                const marker = symbol;\r\n                if (!marker.loaded)\r\n                    yield marker.load();\r\n                if (marker.icon) {\r\n                    const matrix = ctx.getTransform();\r\n                    //keep size\r\n                    ctx.setTransform(1, 0, 0, 1, 0, 0);\r\n                    ctx.drawImage(marker.icon, (matrix.a * this._x + matrix.e) - marker.offsetX, (matrix.d * this._y + matrix.f) - marker.offsetY, marker.width, marker.height);\r\n                }\r\n            }\r\n            ctx.restore();\r\n        });\r\n    }\r\n    ;\r\n}\r\nPoint.RADIUS = 10; //10px\r\n","import { Geometry } from \"./geometry\";\r\nimport { Bound } from \"../util/bound\";\r\nimport { SimpleFillSymbol } from \"../symbol/symbol\";\r\nimport { WebMercator } from \"../projection/web-mercator\";\r\n//面\r\nexport class Polygon extends Geometry {\r\n    constructor(lnglats) {\r\n        super();\r\n        this._lnglats = lnglats;\r\n    }\r\n    ;\r\n    /* addTo(map) {\r\n        this._projection = map.projection;\r\n        this._coordinates = this._lnglats.map((ring:any) => ring.map((point: any) => this._projection.project(point)));\r\n\r\n        let xmin = Number.MAX_VALUE, ymin = Number.MAX_VALUE, xmax = -Number.MAX_VALUE, ymax = -Number.MAX_VALUE;\r\n        this._coordinates.forEach( ring => {\r\n            ring.forEach(point =>{\r\n                xmin = Math.min(xmin, point[0]);\r\n                ymin = Math.min(ymin, point[1]);\r\n                xmax = Math.max(xmax, point[0]);\r\n                ymax = Math.max(ymax, point[1]);\r\n            })\r\n        });\r\n        this._bound = new Bound(xmin, ymin, xmax, ymax);\r\n        map.addGeometry(this);\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D) {\r\n        ctx.save();\r\n        ctx.strokeStyle = \"#ff0000\";\r\n        ctx.fillStyle = \"#ff0000\";\r\n        ctx.lineWidth = 2;\r\n        ctx.beginPath();\r\n        const matrix = (ctx as any).getTransform();\r\n        ctx.setTransform(1,0,0,1,0,0);\r\n        this._coordinates.forEach( ring => {\r\n            ring.forEach( (point,index) => {\r\n                let x = point[0], y = point[1];\r\n                if (index === 0){\r\n                    ctx.moveTo((matrix.a * x + matrix.e), (matrix.d * y + matrix.f));\r\n                } else {\r\n                    ctx.lineTo((matrix.a * x + matrix.e), (matrix.d * y + matrix.f));\r\n                }\r\n            });\r\n        });\r\n        ctx.closePath();\r\n        ctx.fill(\"evenodd\");\r\n        ctx.stroke();\r\n        ctx.restore();\r\n    } */\r\n    project(projection) {\r\n        this._projection = projection;\r\n        this._coordinates = this._lnglats.map((ring) => ring.map((point) => this._projection.project(point)));\r\n        let xmin = Number.MAX_VALUE, ymin = Number.MAX_VALUE, xmax = -Number.MAX_VALUE, ymax = -Number.MAX_VALUE;\r\n        this._coordinates.forEach(ring => {\r\n            ring.forEach(point => {\r\n                xmin = Math.min(xmin, point[0]);\r\n                ymin = Math.min(ymin, point[1]);\r\n                xmax = Math.max(xmax, point[0]);\r\n                ymax = Math.max(ymax, point[1]);\r\n            });\r\n        });\r\n        this._bound = new Bound(xmin, ymin, xmax, ymax);\r\n    }\r\n    draw(ctx, projection = new WebMercator(), extent = projection.bound, symbol = new SimpleFillSymbol()) {\r\n        if (!this._projected)\r\n            this.project(projection);\r\n        if (!extent.intersect(this._bound))\r\n            return;\r\n        ctx.save();\r\n        ctx.strokeStyle = symbol.strokeStyle;\r\n        ctx.fillStyle = symbol.fillStyle;\r\n        ctx.lineWidth = symbol.lineWidth;\r\n        const matrix = ctx.getTransform();\r\n        //keep lineWidth\r\n        ctx.setTransform(1, 0, 0, 1, 0, 0);\r\n        //TODO:  exceeding the maximum extent(bound), best way is overlap by extent. find out: maximum is [-PI*R, PI*R]??\r\n        ctx.beginPath();\r\n        this._coordinates.forEach(ring => {\r\n            ring.forEach((point, index) => {\r\n                const screenX = (matrix.a * point[0] + matrix.e), screenY = (matrix.d * point[1] + matrix.f);\r\n                if (index === 0) {\r\n                    ctx.moveTo(screenX, screenY);\r\n                }\r\n                else {\r\n                    ctx.lineTo(screenX, screenY);\r\n                }\r\n            });\r\n        });\r\n        ctx.closePath();\r\n        ctx.fill(\"evenodd\");\r\n        ctx.stroke();\r\n        ctx.restore();\r\n    }\r\n}\r\n","import { Geometry } from \"./geometry\";\r\nimport { Bound } from \"../util/bound\";\r\nimport { SimpleLineSymbol } from \"../symbol/symbol\";\r\nimport { WebMercator } from \"../projection/web-mercator\";\r\n//线\r\nexport class Polyline extends Geometry {\r\n    constructor(lnglats) {\r\n        super();\r\n        this._lnglats = lnglats;\r\n    }\r\n    ;\r\n    /* addTo(map) {\r\n        this._projection = map.projection;\r\n        this._coordinates = this._lnglats.map( (point: any) => this._projection.project(point));\r\n\r\n        let xmin = Number.MAX_VALUE, ymin = Number.MAX_VALUE, xmax = -Number.MAX_VALUE, ymax = -Number.MAX_VALUE;\r\n        this._coordinates.forEach( point => {\r\n            xmin = Math.min(xmin, point[0]);\r\n            ymin = Math.min(ymin, point[1]);\r\n            xmax = Math.max(xmax, point[0]);\r\n            ymax = Math.max(ymax, point[1]);\r\n        });\r\n        this._bound = new Bound(xmin, ymin, xmax, ymax);\r\n\r\n        map.addGeometry(this);\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D) {\r\n        ctx.save();\r\n        ctx.strokeStyle = \"#ff0000\";\r\n        ctx.lineWidth = 2;\r\n        ctx.beginPath();\r\n        const matrix = (ctx as any).getTransform();\r\n        //keep lineWidth\r\n        ctx.setTransform(1,0,0,1,0,0);\r\n        this._coordinates.forEach( (point: any,index) => {\r\n            if (index === 0){\r\n                ctx.moveTo((matrix.a * point[0] + matrix.e), (matrix.d * point[1] + matrix.f));\r\n            } else {\r\n                ctx.lineTo((matrix.a * point[0] + matrix.e), (matrix.d * point[1] + matrix.f));\r\n            }\r\n        });\r\n        ctx.stroke();\r\n        ctx.restore();\r\n    } */\r\n    project(projection) {\r\n        this._projection = projection;\r\n        this._coordinates = this._lnglats.map((point) => this._projection.project(point));\r\n        let xmin = Number.MAX_VALUE, ymin = Number.MAX_VALUE, xmax = -Number.MAX_VALUE, ymax = -Number.MAX_VALUE;\r\n        this._coordinates.forEach(point => {\r\n            xmin = Math.min(xmin, point[0]);\r\n            ymin = Math.min(ymin, point[1]);\r\n            xmax = Math.max(xmax, point[0]);\r\n            ymax = Math.max(ymax, point[1]);\r\n        });\r\n        this._bound = new Bound(xmin, ymin, xmax, ymax);\r\n    }\r\n    draw(ctx, projection = new WebMercator(), extent = projection.bound, symbol = new SimpleLineSymbol()) {\r\n        if (!this._projected)\r\n            this.project(projection);\r\n        if (!extent.intersect(this._bound))\r\n            return;\r\n        ctx.save();\r\n        ctx.strokeStyle = symbol.strokeStyle;\r\n        ctx.lineWidth = symbol.lineWidth;\r\n        const matrix = ctx.getTransform();\r\n        //keep lineWidth\r\n        ctx.setTransform(1, 0, 0, 1, 0, 0);\r\n        //TODO:  exceeding the maximum extent(bound), best way is overlap by extent. find out: maximum is [-PI*R, PI*R]??\r\n        ctx.beginPath();\r\n        this._coordinates.forEach((point, index) => {\r\n            const screenX = (matrix.a * point[0] + matrix.e), screenY = (matrix.d * point[1] + matrix.f);\r\n            if (index === 0) {\r\n                ctx.moveTo(screenX, screenY);\r\n            }\r\n            else {\r\n                ctx.lineTo(screenX, screenY);\r\n            }\r\n        });\r\n        ctx.stroke();\r\n        ctx.restore();\r\n    }\r\n}\r\n","export * from './map';\r\nexport * from './element/graphic';\r\nexport * from './geometry/geometry';\r\nexport * from './geometry/point';\r\nexport * from './geometry/polyline';\r\nexport * from './geometry/polygon';\r\nexport * from './layer/layer';\r\nexport * from './layer/graphic-layer';\r\nexport * from './projection/projection';\r\nexport * from './projection/web-mercator';\r\nexport * from './symbol/symbol';\r\nexport * from './util/bound';\r\n","import { Layer } from \"./layer\";\r\nimport { WebMercator } from \"../projection/web-mercator\";\r\nexport class GraphicLayer extends Layer {\r\n    constructor() {\r\n        super(...arguments);\r\n        this._graphics = [];\r\n    }\r\n    add(graphic) {\r\n        this._graphics.push(graphic);\r\n    }\r\n    draw(ctx, projection = new WebMercator(), extent = projection.bound) {\r\n        if (this.visible) {\r\n            this._graphics.forEach((graphic) => {\r\n                graphic.draw(ctx, projection, extent);\r\n            });\r\n        }\r\n    }\r\n}\r\n","import { WebMercator } from \"../projection/web-mercator\";\r\nexport class Layer {\r\n    constructor() {\r\n        this._visible = true;\r\n    }\r\n    get visible() {\r\n        return this._visible;\r\n    }\r\n    set visible(value) {\r\n        this._visible = value;\r\n    }\r\n    draw(ctx, projection = new WebMercator(), extent = projection.bound, zoom = 10) { }\r\n    ;\r\n}\r\n","import { Bound } from \"./util/bound\";\r\nimport { WebMercator } from \"./projection/web-mercator\";\r\nimport { GraphicLayer } from \"./layer/graphic-layer\";\r\nexport class Map {\r\n    constructor(id) {\r\n        this._drag = {\r\n            flag: false,\r\n            start: {\r\n                x: 0,\r\n                y: 0\r\n            },\r\n            end: {\r\n                x: 0,\r\n                y: 0\r\n            }\r\n        };\r\n        //private _geometries: Geometry[] = [];\r\n        this._defaultGraphicLayer = new GraphicLayer();\r\n        this._layers = [];\r\n        //地图缩放等级\r\n        this._zoom = 1;\r\n        //地图视图中心\r\n        this._center = [0, 0];\r\n        //地图事件的handlers\r\n        this._events = {\r\n            \"move\": [],\r\n            \"extent\": [] //视图范围更新时，当前关注该事件\r\n        };\r\n        this._container = id instanceof HTMLDivElement ? id : document.getElementById(id);\r\n        //create canvas\r\n        this._canvas = document.createElement(\"canvas\");\r\n        this._canvas.style.cssText = \"position: absolute; height: 100%; width: 100%; z-index: 100\";\r\n        this._canvas.width = this._container.clientWidth;\r\n        this._canvas.height = this._container.clientHeight;\r\n        this._container.appendChild(this._canvas);\r\n        this._ctx = this._canvas.getContext(\"2d\");\r\n        this._onDoubleClick = this._onDoubleClick.bind(this);\r\n        this._onMouseDown = this._onMouseDown.bind(this);\r\n        this._onMouseMove = this._onMouseMove.bind(this);\r\n        this._onMouseUp = this._onMouseUp.bind(this);\r\n        this._onWheel = this._onWheel.bind(this);\r\n        this._canvas.addEventListener(\"dblclick\", this._onDoubleClick);\r\n        this._canvas.addEventListener(\"mousedown\", this._onMouseDown);\r\n        this._canvas.addEventListener(\"mousemove\", this._onMouseMove);\r\n        this._canvas.addEventListener(\"mouseup\", this._onMouseUp);\r\n        this._canvas.addEventListener(\"wheel\", this._onWheel);\r\n        //初始化\r\n        this._projection = new WebMercator();\r\n        this.setView([0, 0], 3);\r\n    }\r\n    get projection() {\r\n        return this._projection;\r\n    }\r\n    //地图事件注册监听\r\n    //TODO: need to off\r\n    on(event, handler) {\r\n        this._events[event].push(handler);\r\n    }\r\n    //设置视图级别及视图中心\r\n    setView(center = [0, 0], zoom = 3) {\r\n        this._center = center;\r\n        this._zoom = Math.max(3, Math.min(20, zoom));\r\n        //center为经纬度，转化为平面坐标\r\n        const origin = this._projection.project(center);\r\n        const bound = this._projection.bound;\r\n        //已知：matrix 转换前 坐标origin，转换后坐标 即canvas的中心 [this._canvas.width / 2, this._canvas.height / 2]\r\n        //求：转换矩阵\r\n        //解法如下：\r\n        const a = 256 * Math.pow(2, this._zoom) / (bound.xmax - bound.xmin) * bound.xscale;\r\n        const d = 256 * Math.pow(2, this._zoom) / (bound.ymax - bound.ymin) * bound.yscale;\r\n        const e = this._canvas.width / 2 - a * origin[0];\r\n        const f = this._canvas.height / 2 - d * origin[1];\r\n        this._ctx.setTransform(a, 0, 0, d, e, f);\r\n        this.redraw();\r\n    }\r\n    //TODO: manage geometry by layer\r\n    /* addGeometry(geometry: Geometry) {\r\n        geometry.draw(this._ctx);\r\n        this._geometries.push(geometry);\r\n    } */\r\n    addLayer(layer) {\r\n        this._layers.push(layer);\r\n        layer.draw(this._ctx, this._projection, this._extent);\r\n    }\r\n    //shortcut\r\n    addGraphic(graphic) {\r\n        this._defaultGraphicLayer.add(graphic);\r\n        graphic.draw(this._ctx, this._projection, this._extent);\r\n    }\r\n    //更新地图视图范围以及中心点\r\n    updateExtent() {\r\n        const matrix = this._ctx.getTransform();\r\n        const x1 = (0 - matrix.e) / matrix.a, y1 = (0 - matrix.f) / matrix.d, x2 = (this._canvas.width - matrix.e) / matrix.a, y2 = (this._canvas.height - matrix.f) / matrix.d;\r\n        this._extent = new Bound(Math.min(x1, x2), Math.min(y1, y2), Math.max(x1, x2), Math.max(y1, y2));\r\n        this._center = this._projection.unproject([(x1 + x2) / 2, (y1 + y2) / 2]);\r\n        this._events.extent.forEach(handler => handler({ extent: this._extent, center: this._center, zoom: this._zoom, matrix: matrix }));\r\n    }\r\n    redraw() {\r\n        this._ctx.save();\r\n        this._ctx.setTransform(1, 0, 0, 1, 0, 0);\r\n        this._ctx.clearRect(0, 0, this._canvas.width, this._canvas.height);\r\n        this._ctx.restore();\r\n        this.updateExtent();\r\n        //this._geometries.forEach(geometry => geometry.draw(this._ctx));\r\n        this._defaultGraphicLayer.draw(this._ctx, this._projection, this._extent);\r\n        this._layers.forEach(layer => {\r\n            layer.draw(this._ctx, this._projection, this._extent);\r\n        });\r\n    }\r\n    clear() {\r\n        this._ctx.setTransform(1, 0, 0, 1, 0, 0);\r\n        this._ctx.clearRect(0, 0, this._canvas.width, this._canvas.height);\r\n    }\r\n    _onDoubleClick(event) {\r\n        if (this._zoom >= 20)\r\n            return;\r\n        const scale = 2;\r\n        this._zoom += 1;\r\n        const matrix = this._ctx.getTransform();\r\n        const a1 = matrix.a, e1 = matrix.e, x1 = event.x, x2 = x1; //放大到中心点 x2 = this._canvas.width / 2\r\n        const e = (x2 - scale * (x1 - e1) - e1) / a1;\r\n        const d1 = matrix.d, f1 = matrix.f, y1 = event.y, y2 = y1; //放大到中心点 y2 = this._canvas.height / 2\r\n        const f = (y2 - scale * (y1 - f1) - f1) / d1;\r\n        this._ctx.transform(scale, 0, 0, scale, e, f);\r\n        this.redraw();\r\n    }\r\n    _onMouseDown(event) {\r\n        this._drag.flag = true;\r\n        this._drag.start.x = event.x;\r\n        this._drag.start.y = event.y;\r\n    }\r\n    _onMouseMove(event) {\r\n    }\r\n    _onMouseUp(event) {\r\n        if (this._drag.flag) {\r\n            this._drag.end.x = event.x;\r\n            this._drag.end.y = event.y;\r\n            const matrix = this._ctx.getTransform();\r\n            this._ctx.translate((this._drag.end.x - this._drag.start.x) / matrix.a, (this._drag.end.y - this._drag.start.y) / matrix.d);\r\n            this.redraw();\r\n        }\r\n        this._drag.flag = false;\r\n    }\r\n    _onWheel(event) {\r\n        event.preventDefault();\r\n        const sensitivity = 5;\r\n        if (Math.abs(event.deltaY) <= sensitivity)\r\n            return;\r\n        //const sensitivity = 100;\r\n        //const delta = event.deltaY / sensitivity;\r\n        const delta = event.deltaY < 0 ? -1 : 1;\r\n        let scale = 1;\r\n        if (delta < 0) {\r\n            // 放大\r\n            scale *= delta * -2;\r\n        }\r\n        else {\r\n            // 缩小\r\n            scale /= delta * 2;\r\n        }\r\n        let zoom = Math.round(Math.log(scale));\r\n        if (zoom > 0) {\r\n            // 放大\r\n            zoom = this._zoom + zoom >= 20 ? 20 - this._zoom : zoom;\r\n        }\r\n        else if (zoom < 0) {\r\n            // 缩小\r\n            zoom = this._zoom + zoom <= 3 ? 3 - this._zoom : zoom;\r\n        }\r\n        if (zoom == 0)\r\n            return;\r\n        this._zoom += zoom;\r\n        scale = Math.pow(2, zoom);\r\n        //交互表现为 鼠标当前位置 屏幕坐标不变 进行缩放 即x2 = x1\r\n        //第一种方案，坐标系不变，变坐标值\r\n        //1.将原屏幕坐标 x1 转成 初始坐标 x0 = (x1 - e1) / a1  初始矩阵 (1,0,0,1,0,0)\r\n        //2.初始坐标x0 转成 现屏幕坐标x2  a2 * x0 + e2 = x2    e2 = x2 - a2 * x0  代入1式 e2 = x2 - a2 * (x1 - e1) / a1\r\n        //3.已知scale = a2 / a1  故 e2 = x2 - scale * (x1 - e1)\r\n        //4.另矩阵变换 a1 * e + e1 = e2\r\n        //5.联立3和4  求得 e = (x2 - scale * (x1 - e1) - e1) / a1\r\n        const matrix = this._ctx.getTransform();\r\n        const a1 = matrix.a, e1 = matrix.e, x1 = event.x, x2 = x1; //放大到中心点 x2 = this._canvas.width / 2\r\n        const e = (x2 - scale * (x1 - e1) - e1) / a1;\r\n        const d1 = matrix.d, f1 = matrix.f, y1 = event.y, y2 = y1; //放大到中心点 y2 = this._canvas.height / 2\r\n        const f = (y2 - scale * (y1 - f1) - f1) / d1;\r\n        this._ctx.transform(scale, 0, 0, scale, e, f);\r\n        this.redraw();\r\n    }\r\n    destroy() {\r\n        this._canvas.removeEventListener(\"dblclick\", this._onDoubleClick);\r\n        this._canvas.removeEventListener(\"mousedown\", this._onMouseDown);\r\n        this._canvas.removeEventListener(\"mousemove\", this._onMouseMove);\r\n        this._canvas.removeEventListener(\"mouseup\", this._onMouseUp);\r\n        this._canvas.removeEventListener(\"wheel\", this._onWheel);\r\n    }\r\n}\r\n","//TODO: only support web mecator\r\nexport class Projection {\r\n    //经纬度转平面坐标\r\n    project([lng, lat]) { return []; }\r\n    ;\r\n    //平面坐标转经纬度\r\n    unproject([x, y]) { return []; }\r\n    ;\r\n    //投影后的平面坐标范围\r\n    get bound() { return null; }\r\n    ;\r\n}\r\n","import { Bound } from \"../util/bound\";\r\nimport { Projection } from \"./projection\";\r\n//球体墨卡托\r\nexport class WebMercator extends Projection {\r\n    //投影后的平面坐标范围\r\n    get bound() {\r\n        return new Bound(-Math.PI * WebMercator.R, Math.PI * WebMercator.R, Math.PI * WebMercator.R, -Math.PI * WebMercator.R);\r\n    }\r\n    //经纬度转平面坐标\r\n    project([lng, lat]) {\r\n        //from leaflet & wiki\r\n        const d = Math.PI / 180, sin = Math.sin(lat * d);\r\n        return [WebMercator.R * lng * d, WebMercator.R * Math.log((1 + sin) / (1 - sin)) / 2];\r\n    }\r\n    //平面坐标转经纬度\r\n    unproject([x, y]) {\r\n        const d = 180 / Math.PI;\r\n        return [x * d / WebMercator.R, (2 * Math.atan(Math.exp(y / WebMercator.R)) - (Math.PI / 2)) * d];\r\n    }\r\n}\r\nWebMercator.R = 6378137;\r\n","export class Symbol {\r\n}\r\nexport class SimplePointSymbol extends Symbol {\r\n    constructor() {\r\n        super(...arguments);\r\n        //circle\r\n        this.radius = 6;\r\n        this.lineWidth = 1;\r\n        this.strokeStyle = \"#ff0000\"; //#ff0000\r\n        this.fillStyle = \"#ff000088\"; //#ff0000\r\n    }\r\n}\r\nexport class SimpleLineSymbol extends Symbol {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.lineWidth = 1;\r\n        this.strokeStyle = \"#ff0000\"; //#ff0000\r\n    }\r\n}\r\nexport class SimpleFillSymbol extends Symbol {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.lineWidth = 2;\r\n        this.strokeStyle = \"#ff0000\"; //#ff0000\r\n        this.fillStyle = \"#ff000088\"; //#ff0000\r\n    }\r\n}\r\nexport class SimpleMarkerSymbol extends Symbol {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.width = 16;\r\n        this.height = 16;\r\n        this.offsetX = 8;\r\n        this.offsetY = 8;\r\n    }\r\n    get loaded() {\r\n        return this._loaded;\r\n    }\r\n    load() {\r\n        return new Promise((resolve, reject) => {\r\n            let img = new Image();\r\n            img.onload = () => {\r\n                createImageBitmap(img).then(icon => {\r\n                    this.icon = icon;\r\n                    this._loaded = true;\r\n                    resolve(icon);\r\n                }, err => reject(err));\r\n            };\r\n            img.onerror = reject;\r\n            img.src = this.url;\r\n        });\r\n    }\r\n}\r\n","//边界类，用在包络矩形，以及投影的平面坐标边界\r\nexport class Bound {\r\n    constructor(xmin, ymin, xmax, ymax) {\r\n        //+1代表 x方向为自西向东，-1则反之\r\n        this._xscale = 1;\r\n        //+1代表 y方向为自北向南，-1则反之\r\n        this._yscale = 1;\r\n        this._xmin = Math.min(xmin, xmax);\r\n        this._ymin = Math.min(ymin, ymax);\r\n        this._xmax = Math.max(xmin, xmax);\r\n        this._ymax = Math.max(ymin, ymax);\r\n        this._xscale = xmin <= xmax ? 1 : -1;\r\n        this._yscale = ymin <= ymax ? 1 : -1;\r\n    }\r\n    get xmin() {\r\n        return this._xmin;\r\n    }\r\n    get ymin() {\r\n        return this._ymin;\r\n    }\r\n    get xmax() {\r\n        return this._xmax;\r\n    }\r\n    get ymax() {\r\n        return this._ymax;\r\n    }\r\n    get xscale() {\r\n        return this._xscale;\r\n    }\r\n    get yscale() {\r\n        return this._yscale;\r\n    }\r\n    getCenter() {\r\n        return [(this._xmin + this._xmax) / 2, (this._ymin + this._ymax) / 2];\r\n    }\r\n    //是否交叉叠盖\r\n    intersect(bound) {\r\n        return (bound.xmax >= this._xmin) && (bound.xmin <= this._xmax) && (bound.ymax >= this._ymin) && (bound.ymin <= this._ymax);\r\n    }\r\n    scale(s) {\r\n        this._xmin = this._xmin - (s - 1) * (this._xmax - this._xmin) / 2;\r\n        this._xmax = this._xmax + (s - 1) * (this._xmax - this._xmin) / 2;\r\n        this._ymin = this._ymin - (s - 1) * (this._ymax - this._ymin) / 2;\r\n        this._ymax = this._ymax + (s - 1) * (this._ymax - this._ymin) / 2;\r\n    }\r\n}\r\n","import {Map, Point, Polyline, Polygon, Graphic, GraphicLayer, SimpleLineSymbol, SimplePointSymbol, SimpleMarkerSymbol} from \"../dist\";\r\n\r\nwindow.load = () => {\r\n    const amap = new AMap.Map(\"amap\", {\r\n        fadeOnZoom: false,\r\n        navigationMode: 'classic',\r\n        optimizePanAnimation: false,\r\n        animateEnable: false,\r\n        dragEnable: false,\r\n        zoomEnable: false,\r\n        resizeEnable: true,\r\n        doubleClickZoom: false,\r\n        keyboardEnable: false,\r\n        scrollWheel: false,\r\n        expandZoomRange: true,\r\n        zooms: [1, 20],\r\n        mapStyle: 'normal',\r\n        features: ['road', 'point', 'bg'],\r\n        viewMode: '2D'\r\n    });\r\n\r\n    const map = new Map(\"foo\");\r\n    map.on(\"extent\", (event) => {\r\n        amap.setZoomAndCenter(event.zoom, event.center);\r\n    });\r\n\r\n    /* //画经线\r\n    for (let i = -180; i <= 180; i = i + 10){\r\n        const line = new Polyline([[i, -80], [i, 80]]);\r\n        line.addTo(map);\r\n    }\r\n    //画纬线\r\n    for (let j = -80; j <= 80; j = j + 10){\r\n        const line = new Polyline([[-180, j], [180, j]]);\r\n        line.addTo(map);\r\n    }\r\n    //画经纬线交点\r\n    for (let i = -180; i <= 180; i = i + 10){\r\n        for (let j = -90; j <= 90; j = j + 10){\r\n            const point = new Point(i, j);\r\n            point.addTo(map);\r\n        }\r\n    }*/\r\n\r\n\r\n    //画经线\r\n    const lngLayer = new GraphicLayer();\r\n    const lngSymbol = new SimpleLineSymbol();\r\n    lngSymbol.strokeStyle = \"#0000ff\";\r\n    for (let i = -180; i <= 180; i = i + 10){\r\n        const line = new Polyline([[i, -80], [i, 80]]);\r\n        const graphic = new Graphic(line, lngSymbol);\r\n        lngLayer.add(graphic);\r\n    }\r\n    map.addLayer(lngLayer);\r\n    //画纬线\r\n    const latLayer = new GraphicLayer();\r\n    const latSymbol = new SimpleLineSymbol();\r\n    lngSymbol.strokeStyle = \"#4d9221\";\r\n    for (let j = -80; j <= 80; j = j + 10){\r\n        const line = new Polyline([[-180, j], [180, j]]);\r\n        const graphic = new Graphic(line, latSymbol);\r\n        latLayer.add(graphic);\r\n    }\r\n    map.addLayer(latLayer);\r\n    //画经纬线交点\r\n    const pointLayer = new GraphicLayer();\r\n    const pointSymbol = new SimplePointSymbol();\r\n    pointSymbol.radius = 5;\r\n    pointSymbol.fillStyle = \"#de77ae\";\r\n    pointSymbol.strokeStyle = \"#c51b7d\";\r\n    for (let i = -180; i <= 180; i = i + 10){\r\n        for (let j = -90; j <= 90; j = j + 10){\r\n            const point = new Point(i, j);\r\n            const graphic = new Graphic(point, pointSymbol);\r\n            pointLayer.add(graphic);\r\n        }\r\n    }\r\n    map.addLayer(pointLayer);\r\n\r\n    /* const point = new Point(116.397411,39.909186);\r\n    point.addTo(map); */\r\n\r\n    //beijing gugong\r\n    const marker = new SimpleMarkerSymbol();\r\n    marker.width = 32;\r\n    marker.height = 32;\r\n    marker.offsetX = 16;\r\n    marker.offsetY = 32;\r\n    marker.url = \"assets/img/marker.svg\";\r\n    const point = new Point(116.397411,39.909186);\r\n    const graphic = new Graphic(point, marker);\r\n    map.addGraphic(graphic);\r\n\r\n    map.setView([0, 0], 5);\r\n}\r\n\r\n//cause typescript tsc forget js suffix for geometry.js"],"sourceRoot":""}